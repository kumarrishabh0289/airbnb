{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { isEqual, cloneDate } from '@progress/kendo-date-math';\nimport { registerForIntl, provideIntlService, registerForLocalization, provideLocalizationService } from '@progress/kendo-react-intl';\nimport { KendoDate } from './models';\nimport { FloatingLabel, guid, noop } from '@progress/kendo-react-common';\nimport { approximateStringMatching, defaultFormat, defaultFormatPlaceholder, isInRange, invalidClasses, wrapperClasses } from './utils';\nimport { MAX_DATE, MIN_DATE } from './../utils';\nimport { messages, increaseValue, decreaseValue } from './../messages';\nimport { isInTimeRange } from '../timepicker/utils';\nimport { MIN_TIME, MAX_TIME } from '../defaults';\nvar VALIDATION_MESSAGE = 'Please enter a valid value!'; // tslint:enable:max-line-length\n\nvar DateInput =\n/** @class */\nfunction (_super) {\n  __extends(DateInput, _super);\n\n  function DateInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.kendoDate = null;\n    _this._element = null;\n    _this._inputId = guid();\n    /**\n     * @hidden\n     */\n\n    _this.setValidity = function () {\n      if (_this.element && _this.element.setCustomValidity) {\n        _this.element.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || DateInput.defaultProps.validationMessage);\n      }\n    };\n    /* Handlers */\n\n\n    _this.spinnersMouseDown = function (event) {\n      /* do not steal focus from input when changing value with spinners */\n      event.preventDefault();\n      /* manually focus the input in case the user clicks the spinners first */\n\n      if (_this.element && document.activeElement !== _this.element) {\n        _this.element.focus({\n          preventScroll: true\n        });\n      }\n    };\n\n    _this.elementChange = function (event) {\n      if (!_this.element || !_this.kendoDate) {\n        return;\n      }\n\n      var _a = _this.kendoDate.getTextAndFormat(),\n          text = _a.text,\n          currentFormat = _a.format;\n\n      _this.currentFormat = currentFormat;\n      var dateBeforeChange = _this.value;\n      var diff = approximateStringMatching(text, _this.currentFormat, _this.element.value, _this.selection.start);\n      var navigationOnly = diff.length === 1 && diff[0][1] === '_';\n\n      if (!navigationOnly) {\n        for (var i = 0; i < diff.length; i++) {\n          _this.kendoDate.parsePart(diff[i][0], diff[i][1]);\n        }\n      }\n\n      if (diff.length && diff[0][0] !== '_') {\n        _this.setSelection(_this.selectionBySymbol(diff[0][0]));\n      }\n\n      if (navigationOnly) {\n        _this.switchDateSegment(1);\n      }\n\n      _this.triggerChange(event, dateBeforeChange);\n    };\n\n    _this.elementClick = function (_) {\n      _this.setSelection(_this.selectionByIndex(_this.selection.start));\n    };\n\n    _this.wheel = function (event) {\n      if (document.activeElement !== _this.element) {\n        return;\n      }\n\n      if (event.nativeEvent.deltaY < 0) {\n        event.preventDefault();\n\n        _this.increasePart(event);\n      }\n\n      if (event.nativeEvent.deltaY > 0) {\n        event.preventDefault();\n\n        _this.decreasePart(event);\n      }\n    };\n\n    _this.increasePart = function (event) {\n      _this.modifyDateSegmentValue(1, event);\n    };\n\n    _this.decreasePart = function (event) {\n      _this.modifyDateSegmentValue(-1, event);\n    };\n\n    _this.elementKeyDown = function (event) {\n      if (event.altKey) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case 37:\n          /*\n          * Key: `Left Arrow`\n          * Action: Switches to previous logical* segment.\n          * (*) https://www.w3.org/International/articles/inline-bidi-markup/uba-basics\n          */\n          _this.switchDateSegment(-1);\n\n          break;\n\n        case 38:\n          /*\n          * Key: `Up Arrow`\n          * Action: Increases the currently selected segment value.\n          */\n          _this.modifyDateSegmentValue(1, event);\n\n          break;\n\n        case 39:\n          /*\n          * Key: `Right Arrow`\n          * Action: Switches to the next logical segment.\n          */\n          _this.switchDateSegment(1);\n\n          break;\n\n        case 40:\n          /*\n          * Key: `Down Arrow`\n          * Action: Decreases the currently selected segment value.\n          */\n          _this.modifyDateSegmentValue(-1, event);\n\n          break;\n\n        default:\n          /*\n          * Key: any\n          * Action: Does not prevent the default behavior.\n          */\n          return;\n      }\n\n      event.preventDefault();\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  DateInput.prototype.componentDidMount = function () {\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  DateInput.prototype.componentDidUpdate = function () {\n    if (this._lastSelectedSymbol) {\n      this.setSelection(this.selectionBySymbol(this._lastSelectedSymbol));\n    }\n\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  DateInput.prototype.render = function () {\n    var _this = this;\n\n    var localizationService = provideLocalizationService(this);\n\n    var props = __assign({}, DateInput.defaultProps, this.props);\n\n    var formatPlaceholder = props.formatPlaceholder,\n        format = props.format,\n        value = props.value,\n        min = props.min,\n        max = props.max,\n        name = props.name,\n        label = props.label,\n        id = props.id,\n        defaultValue = props.defaultValue;\n\n    if (this.kendoDate === null) {\n      this.kendoDate = new KendoDate(this.intl.bind(this), formatPlaceholder, format);\n      this.kendoDate.setValue(value || defaultValue);\n    } else {\n      this.kendoDate.format = format;\n      this.kendoDate.formatPlaceholder = formatPlaceholder;\n    }\n\n    if (value !== undefined && this.value !== value) {\n      this.kendoDate.setValue(value);\n    }\n\n    var _a = this.kendoDate.getTextAndFormat(),\n        currentText = _a.text,\n        currentFormat = _a.format;\n\n    this.currentFormat = currentFormat;\n    var inputId = id || this._inputId;\n    var isValid = !this.validityStyles || this.validity.valid;\n    var ariaProps = {\n      'aria-valuemin': min === null ? undefined : min.getTime(),\n      'aria-valuemax': max === null ? undefined : max.getTime(),\n      'aria-valuetext': currentText\n    };\n\n    if (this.value !== null) {\n      ariaProps['aria-valuenow'] = this.value.getTime();\n    }\n\n    var wrapperClassesInstance = wrapperClasses.slice();\n\n    if (this.props.className) {\n      wrapperClassesInstance.push(this.props.className);\n    }\n\n    var dateinput = React.createElement(\"span\", {\n      style: !label ? {\n        width: this.props.width\n      } : undefined,\n      dir: this.props.dir,\n      className: isValid ? wrapperClassesInstance.join(' ') : Array.prototype.concat([], wrapperClassesInstance, invalidClasses).join(' ')\n    }, React.createElement(\"span\", {\n      className: 'k-dateinput-wrap' + (this.props.disabled ? ' k-state-disabled' : '')\n    }, React.createElement(\"input\", __assign({\n      role: \"spinbutton\",\n      tabIndex: this.props.tabIndex,\n      disabled: this.props.disabled,\n      title: this.props.title || currentText,\n      type: \"text\",\n      spellCheck: false,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      className: \"k-input\",\n      id: inputId,\n      onWheel: this.wheel,\n      onClick: this.elementClick,\n      onInput: this.elementChange,\n      onKeyDown: this.elementKeyDown,\n      onChange: noop,\n      value: currentText,\n      name: name\n    }, ariaProps, {\n      ref: function ref(input) {\n        return _this._element = input;\n      }\n    })), this.props.children, this.props.spinners && React.createElement(\"span\", {\n      className: \"k-select\",\n      onMouseDown: this.spinnersMouseDown\n    }, React.createElement(\"span\", {\n      className: \"k-link k-link-increase\",\n      \"aria-label\": localizationService.toLanguageString(increaseValue, messages[increaseValue]),\n      title: localizationService.toLanguageString(increaseValue, messages[increaseValue]),\n      onClick: this.increasePart\n    }, React.createElement(\"span\", {\n      className: \"k-icon k-i-arrow-n\"\n    })), React.createElement(\"span\", {\n      className: \"k-link k-link-decrease\",\n      \"aria-label\": localizationService.toLanguageString(decreaseValue, messages[decreaseValue]),\n      title: localizationService.toLanguageString(decreaseValue, messages[decreaseValue]),\n      onClick: this.decreasePart\n    }, React.createElement(\"span\", {\n      className: \"k-icon k-i-arrow-s\"\n    })))));\n    return label ? React.createElement(FloatingLabel, {\n      id: inputId,\n      value: currentText,\n      valid: isValid,\n      label: label,\n      children: dateinput,\n      style: {\n        width: this.props.width\n      }\n    }) : dateinput;\n  };\n\n  Object.defineProperty(DateInput.prototype, \"value\", {\n    /* Public Getters */\n\n    /**\n     * Gets the value of the DateInput.\n     */\n    get: function get() {\n      if (this.valueDuringOnChange !== undefined) {\n        return this.valueDuringOnChange;\n      }\n\n      return this.kendoDate && this.kendoDate.getDateObject();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateInput.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the DateInput.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateInput.prototype, \"min\", {\n    get: function get() {\n      return this.props.min !== undefined ? this.props.min : DateInput.defaultProps.min;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateInput.prototype, \"max\", {\n    get: function get() {\n      return this.props.max !== undefined ? this.props.max : DateInput.defaultProps.max;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateInput.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the DateInput is set.\n     */\n    get: function get() {\n      var inRange = isInRange(this.value, this.min, this.max) && isInTimeRange(this.value, this.props.minTime, this.props.maxTime);\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = (!this.required || this.value !== null) && inRange;\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        rangeOverflow: this.value && this.max.getTime() < this.value.getTime() || false,\n        rangeUnderflow: this.value && this.value.getTime() < this.min.getTime() || false,\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateInput.prototype, \"element\", {\n    /**\n     * Gets the element of the DateInput.\n     *\n     * @return - An `HTMLInputElement`.\n     *\n     * @example\n     * ```jsx\n     * class App extends React.Component {\n     *     constructor(props) {\n     *         super(props);\n     *     }\n     *     element = null;\n     *     render() {\n     *         return (\n     *             <div>\n     *                 <DateInput\n     *                     ref={(dateInput) =>\n     *                         this.element = dateInput ? dateInput.element : null}\n     *                 />\n     *                 <button onClick={() => console.log(this.element)}>console.log the element</button>\n     *             </div>\n     *         );\n     *     }\n     * }\n     *\n     * ReactDOM.render(\n     *     <App />,\n     *     document.getElementsByTagName('my-app')[0]\n     * );\n     * ```\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  DateInput.prototype.focus = function () {\n    if (this._element) {\n      this._element.focus();\n    }\n  };\n\n  Object.defineProperty(DateInput.prototype, \"validityStyles\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : DateInput.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateInput.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : DateInput.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  DateInput.prototype.intl = function () {\n    return provideIntlService(this);\n  };\n\n  Object.defineProperty(DateInput.prototype, \"selection\", {\n    /*  end handlers */\n    get: function get() {\n      var returnValue = {\n        start: 0,\n        end: 0\n      };\n\n      if (this.element !== null && this.element.selectionStart !== undefined) {\n        returnValue = {\n          start: this.element.selectionStart,\n          end: this.element.selectionEnd\n        };\n      }\n\n      return returnValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DateInput.prototype.setSelection = function (selection) {\n    var _this = this;\n\n    this._lastSelectedSymbol = this.currentFormat[selection.start];\n    window.requestAnimationFrame(function () {\n      if (_this.element && document.activeElement === _this.element) {\n        _this.element.setSelectionRange(selection.start, selection.end);\n      }\n    });\n  };\n\n  DateInput.prototype.triggerChange = function (event, oldValue) {\n    this.valueDuringOnChange = this.value;\n    this.forceUpdate();\n\n    if (this.props.onChange && !isEqual(oldValue, this.value)) {\n      // isEqual works with null\n      this.props.onChange.call(undefined, {\n        syntheticEvent: event,\n        nativeEvent: event.nativeEvent,\n        value: this.value,\n        target: this // inRange: this.props.min && this.props.max ? isInRange(value, this.props.min, this.props.max) : true\n\n      });\n    }\n\n    this.valueDuringOnChange = undefined;\n  };\n\n  DateInput.prototype.selectionBySymbol = function (symbol) {\n    var start = -1;\n    var end = 0;\n\n    for (var i = 0; i < this.currentFormat.length; i++) {\n      if (this.currentFormat[i] === symbol) {\n        end = i + 1;\n\n        if (start === -1) {\n          start = i;\n        }\n      }\n    }\n\n    if (start < 0) {\n      start = 0;\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  DateInput.prototype.selectionByIndex = function (index) {\n    var selection = {\n      start: index,\n      end: index\n    };\n\n    for (var i = index, j = index - 1; i < this.currentFormat.length || j >= 0; i++, j--) {\n      if (i < this.currentFormat.length && this.currentFormat[i] !== '_') {\n        selection = this.selectionBySymbol(this.currentFormat[i]);\n        break;\n      }\n\n      if (j >= 0 && this.currentFormat[j] !== '_') {\n        selection = this.selectionBySymbol(this.currentFormat[j]);\n        break;\n      }\n    }\n\n    return selection;\n  };\n\n  DateInput.prototype.switchDateSegment = function (offset) {\n    var _a = this.selection,\n        selectionStart = _a.start,\n        selectionEnd = _a.end;\n\n    if (selectionStart < selectionEnd && this.currentFormat[selectionStart] !== this.currentFormat[selectionEnd - 1]) {\n      this.setSelection(this.selectionByIndex(offset > 0 ? selectionStart : selectionEnd - 1));\n      return;\n    }\n\n    var previousFormatSymbol = this.currentFormat[selectionStart];\n    var a = selectionStart + offset;\n\n    while (a > 0 && a < this.currentFormat.length) {\n      if (this.currentFormat[a] !== previousFormatSymbol && this.currentFormat[a] !== '_') {\n        break;\n      }\n\n      a += offset;\n    }\n\n    if (this.currentFormat[a] === '_') {\n      // no known symbol is found\n      return;\n    }\n\n    var b = a;\n\n    while (b >= 0 && b < this.currentFormat.length) {\n      if (this.currentFormat[b] !== this.currentFormat[a]) {\n        break;\n      }\n\n      b += offset;\n    }\n\n    if (a > b && (b + 1 !== selectionStart || a + 1 !== selectionEnd)) {\n      this.setSelection({\n        start: b + 1,\n        end: a + 1\n      });\n    } else if (a < b && (a !== selectionStart || b !== selectionEnd)) {\n      this.setSelection({\n        start: a,\n        end: b\n      });\n    }\n  };\n\n  DateInput.prototype.modifyDateSegmentValue = function (offset, event) {\n    if (!this.kendoDate) {\n      return;\n    }\n\n    var oldValue = this.value;\n    var symbol = this.currentFormat[this.selection.start];\n    var currentStepSymbol = this.kendoDate.symbolMap(symbol);\n    var step = ((this.props.steps || {})[currentStepSymbol] || 1) * offset;\n    this.kendoDate.modifyPart(symbol, step);\n    this.setSelection(this.selectionBySymbol(symbol));\n    this.triggerChange(event, oldValue);\n  };\n  /**\n   * @hidden\n   */\n\n\n  DateInput.propTypes = {\n    value: PropTypes.instanceOf(Date),\n    format: PropTypes.string,\n    formatPlaceholder: PropTypes.oneOfType([PropTypes.oneOf(['wide', 'narrow', 'short', 'formatPattern']), PropTypes.shape({\n      year: PropTypes.string,\n      month: PropTypes.string,\n      day: PropTypes.string,\n      hour: PropTypes.string,\n      minute: PropTypes.string,\n      second: PropTypes.string\n    })]),\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    tabIndex: PropTypes.number,\n    title: PropTypes.string,\n    steps: PropTypes.shape({\n      year: PropTypes.number,\n      month: PropTypes.number,\n      day: PropTypes.number,\n      hour: PropTypes.number,\n      minute: PropTypes.number,\n      second: PropTypes.number\n    }),\n    min: PropTypes.instanceOf(Date),\n    max: PropTypes.instanceOf(Date),\n    disabled: PropTypes.bool,\n    spinners: PropTypes.bool,\n    name: PropTypes.string,\n    dir: PropTypes.string,\n    label: PropTypes.string,\n    id: PropTypes.string,\n    onChange: PropTypes.func,\n    validationMessage: PropTypes.string,\n    required: PropTypes.bool,\n    validate: PropTypes.bool,\n    valid: PropTypes.bool\n  };\n  /**\n   * @hidden\n   */\n\n  DateInput.defaultProps = {\n    format: defaultFormat,\n    formatPlaceholder: defaultFormatPlaceholder,\n    defaultValue: null,\n    spinners: false,\n    disabled: false,\n    max: cloneDate(MAX_DATE),\n    min: cloneDate(MIN_DATE),\n    minTime: cloneDate(MIN_TIME),\n    maxTime: cloneDate(MAX_TIME),\n    required: false,\n    validityStyles: true,\n    validationMessage: VALIDATION_MESSAGE // the rest of the properties are undefined by default\n\n  };\n  return DateInput;\n}(React.Component);\n\nexport { DateInput };\nregisterForIntl(DateInput);\nregisterForLocalization(DateInput);","map":null,"metadata":{},"sourceType":"module"}