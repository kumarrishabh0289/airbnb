{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '@progress/kendo-react-common';\nimport { cloneDate, isEqualDate } from '@progress/kendo-date-math';\nimport { registerForIntl, provideIntlService } from '@progress/kendo-react-intl';\nimport { Virtualization } from '../../virtualization/Virtualization';\nimport { View } from './View';\nimport { Header } from './Header';\nimport { dateInRange, shiftWeekNames } from '../../utils';\nimport { CalendarViewEnum } from '../models';\nvar VIEWS_COUNT = 5;\n/**\n * @hidden\n */\n\nvar ViewList =\n/** @class */\nfunction (_super) {\n  __extends(ViewList, _super);\n\n  function ViewList(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.isActive = false;\n    _this.animateToIndex = true;\n    _this.shouldScroll = false;\n\n    _this.focusActiveDate = function () {\n      if (!_this._element) {\n        return;\n      }\n\n      var focusedCell = _this._element.querySelector(\"td.k-state-focused\");\n\n      var nextActiveCell = _this._element.querySelector('.k-state-pending-focus');\n\n      if (focusedCell && focusedCell[0]) {\n        focusedCell[0].classList.remove('k-state-focused');\n      }\n\n      if (nextActiveCell) {\n        nextActiveCell.classList.add('k-state-focused');\n      }\n\n      _this.isActive = true;\n    };\n\n    _this.blurActiveDate = function () {\n      if (!_this._element) {\n        return;\n      }\n\n      var focusedCell = _this._element.querySelector(\"td.k-state-focused\");\n\n      if (focusedCell) {\n        focusedCell.classList.remove('k-state-focused');\n      }\n\n      _this.isActive = false;\n    };\n\n    _this.handleVirtualizationMount = function (virtualization) {\n      _this.virtualization = virtualization;\n\n      if (_this.virtualization && _this.table) {\n        _this.table.style.transform = \"translateY(\" + _this.viewOffset + \"px)\";\n        var viewDate = dateInRange(_this.props.focusedDate, _this.props.min, _this.props.max);\n\n        var indexToScroll = _this.props.service.skip(viewDate, _this.props.min);\n\n        _this.virtualization.scrollToIndex(indexToScroll);\n      }\n    };\n\n    _this.buildMonthView = function (cols, weekNames) {\n      return React.createElement(\"table\", {\n        key: \"calendar-view-list-weekdays\",\n        className: \"k-calendar-weekdays\"\n      }, React.createElement(\"colgroup\", null, cols.map(function (_, idx) {\n        return React.createElement(\"col\", {\n          key: idx\n        });\n      })), React.createElement(\"thead\", null, React.createElement(\"tr\", null, weekNames.map(function (name, idx) {\n        return React.createElement(\"th\", {\n          key: idx\n        }, name);\n      }))));\n    };\n\n    _this.buildDates = function (cols, dates) {\n      var cellUID = _this.props.cellUID;\n      return React.createElement(\"table\", {\n        ref: function ref(table) {\n          return _this.table = table;\n        }\n      }, React.createElement(\"colgroup\", null, cols.map(function (_, idx) {\n        return React.createElement(\"col\", {\n          key: idx\n        });\n      })), dates.map(function (date) {\n        return React.createElement(View, {\n          ref: function ref(el) {\n            if (!_this.calendarView) {\n              _this.calendarView = el;\n            }\n          },\n          key: date.getTime(),\n          activeView: _this.props.activeView,\n          viewDate: date,\n          min: _this.props.min,\n          max: _this.props.max,\n          cellUID: cellUID,\n          focusedDate: _this.props.focusedDate,\n          cell: _this.props.cell,\n          selectedDate: _this.props.value,\n          showWeekNumbers: _this.weekNumber,\n          onChange: _this.handleDateChange,\n          bus: _this.props.bus,\n          service: _this.props.service,\n          weekCell: _this.props.weekCell\n        });\n      }));\n    };\n\n    _this.calculateHeights = function () {\n      if (!_this.props.dom) {\n        return;\n      }\n\n      var scrollableHeight = _this.props.activeView === CalendarViewEnum.month ? _this.props.dom.scrollableContentHeight : _this.props.dom.scrollableYearContentHeight;\n      _this.bottomOffset = scrollableHeight - _this.props.dom.viewHeight(_this.props.activeView);\n      _this.viewOffset = -1 * _this.props.dom.headerHeight;\n      _this.viewHeight = _this.props.dom.viewHeight(_this.props.activeView) || 1;\n    };\n\n    _this.getTake = function (skip, total) {\n      return Math.min(total - skip, _this.take);\n    };\n\n    _this.handleScrollAction = function (_a) {\n      var index = _a.index,\n          scrollAction = _a.scrollAction,\n          pageAction = _a.pageAction;\n      var skip = pageAction ? pageAction.skip : _this.state.skip;\n\n      if (_this.state.index !== index || _this.state.skip !== skip) {\n        _this.setState({\n          index: index,\n          skip: skip\n        });\n      }\n\n      if (_this.table && scrollAction) {\n        var translate = \"translateY(\" + scrollAction.offset + \"px)\";\n        _this.table.style.transform = translate;\n      }\n    };\n\n    _this.handleTodayClick = function (event) {\n      _this.shouldScroll = true;\n\n      _this.handleDateChange.call(undefined, event, true);\n    };\n\n    _this.handleDateChange = function (event, isTodayClick) {\n      if (isTodayClick === void 0) {\n        isTodayClick = false;\n      }\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        var args = {\n          syntheticEvent: event.syntheticEvent,\n          nativeEvent: event.nativeEvent,\n          value: cloneDate(event.value),\n          target: _this,\n          isTodayClick: isTodayClick\n        };\n        onChange.call(undefined, args);\n      }\n    };\n\n    _this.lastView = _this.props.activeView;\n    _this.lastFocus = _this.props.focusedDate;\n    _this.state = {\n      skip: _this.props.service.skip(_this.props.focusedDate, _this.props.min),\n      index: _this.props.service.skip(_this.props.focusedDate, _this.props.min)\n    };\n    return _this;\n  }\n\n  Object.defineProperty(ViewList.prototype, \"element\", {\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ViewList.prototype, \"weekNames\", {\n    get: function get() {\n      this.intl = provideIntlService(this);\n      var weekNames = shiftWeekNames(this.intl.dateFormatNames({\n        nameType: 'short',\n        type: 'days'\n      }), this.intl.firstDay());\n      return this.weekNumber ? [''].concat(weekNames) : weekNames;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ViewList.prototype, \"weekNumber\", {\n    get: function get() {\n      return Boolean(this.props.showWeekNumbers && this.props.activeView === CalendarViewEnum.month);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ViewList.prototype, \"take\", {\n    get: function get() {\n      return this.props.take !== undefined ? this.props.take : ViewList.defaultProps.take;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ViewList.prototype, \"animate\", {\n    get: function get() {\n      return Boolean(this.props.smoothScroll && this.animateToIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ViewList.prototype.componentDidUpdate = function (_prevProps, _prevState) {\n    this.shouldScroll = false;\n\n    if (this.indexToScroll !== undefined && this.virtualization) {\n      this.virtualization[this.animate ? 'animateToIndex' : 'scrollToIndex'](this.indexToScroll);\n    }\n\n    if (this.isActive) {\n      this.focusActiveDate();\n    }\n\n    this.lastView = this.props.activeView; // this.lastFocus = this.props.focusedDate;\n\n    this.indexToScroll = undefined;\n  };\n\n  ViewList.prototype.render = function () {\n    var _this = this;\n\n    this.calculateHeights();\n    var didViewChange = this.lastView !== this.props.activeView;\n    var focusedDate = dateInRange(this.props.focusedDate, this.props.min, this.props.max);\n    var skip = !didViewChange ? this.state.skip : this.props.service.skip(focusedDate, this.props.min);\n    var total = this.props.service.total(this.props.min, this.props.max);\n    var take = this.getTake(skip, total);\n    var viewDate = this.props.service.addToDate(this.props.min, skip);\n    var activeDate = this.props.service.addToDate(this.props.min, this.state.index);\n    var cols = new Array(this.props.service.rowLength(this.weekNumber)).fill('');\n    var didViewChanged = this.props.activeView !== this.lastView;\n    this.animateToIndex = !didViewChanged;\n\n    if (didViewChanged || !isEqualDate(this.lastFocus, focusedDate) || this.shouldScroll || !this.props.shouldScroll || this.props.shouldScroll()) {\n      this.indexToScroll = this.props.service.skip(focusedDate, this.props.min);\n    }\n\n    this.lastFocus = focusedDate;\n    var rootClassNames = classNames('k-calendar-view', {\n      'k-calendar-monthview': this.props.activeView === CalendarViewEnum.month,\n      'k-calendar-yearview': this.props.activeView === CalendarViewEnum.year,\n      'k-calendar-decadeview': this.props.activeView === CalendarViewEnum.decade,\n      'k-calendar-centuryview': this.props.activeView === CalendarViewEnum.century\n    });\n    var dates = this.buildDates(cols, this.props.service.datesList(viewDate, take));\n    var viewListBody = [React.createElement(Header, {\n      key: \"calendar-view-list-header\",\n      currentDate: activeDate,\n      min: this.props.min,\n      max: this.props.max,\n      activeView: this.props.activeView,\n      onTodayClick: this.handleTodayClick,\n      bus: this.props.bus,\n      service: this.props.service,\n      headerTitle: this.props.headerTitle\n    }), this.props.activeView === CalendarViewEnum.month && this.buildMonthView(cols, this.weekNames), React.createElement(Virtualization, {\n      key: \"calendar-view-list-content\",\n      skip: skip,\n      take: this.take,\n      total: total,\n      itemHeight: this.viewHeight,\n      topOffset: this.viewOffset,\n      bottomOffset: this.bottomOffset,\n      scrollOffsetSize: this.viewOffset,\n      maxScrollDifference: this.viewHeight,\n      onScrollAction: this.handleScrollAction,\n      onMount: this.handleVirtualizationMount,\n      children: dates\n    })];\n    return React.createElement(\"div\", {\n      ref: function ref(el) {\n        _this._element = el;\n      },\n      className: rootClassNames\n    }, this.props.dom.didCalculate ? viewListBody : null);\n  };\n\n  ViewList.propTypes = {\n    activeView: PropTypes.number.isRequired,\n    bottomOffset: PropTypes.number,\n    cellUID: PropTypes.string.isRequired,\n    focusedDate: PropTypes.instanceOf(Date).isRequired,\n    max: PropTypes.instanceOf(Date).isRequired,\n    min: PropTypes.instanceOf(Date).isRequired,\n    onChange: PropTypes.func,\n    showWeekNumbers: PropTypes.bool,\n    smoothScroll: PropTypes.bool,\n    take: PropTypes.number,\n    value: PropTypes.instanceOf(Date),\n    viewHeight: PropTypes.number,\n    viewOffset: PropTypes.number\n  };\n  ViewList.defaultProps = {\n    take: VIEWS_COUNT,\n    showWeekNumbers: false,\n    smoothScroll: true\n  };\n  return ViewList;\n}(React.Component);\n\nexport { ViewList };\nregisterForIntl(ViewList);","map":null,"metadata":{},"sourceType":"module"}