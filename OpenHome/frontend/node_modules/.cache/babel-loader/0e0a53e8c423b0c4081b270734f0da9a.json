{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar _a, _b;\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { cloneDate } from '@progress/kendo-date-math';\nimport { Keys, noop } from '@progress/kendo-react-common';\nimport { provideIntlService, registerForIntl } from '@progress/kendo-react-intl';\nimport { Virtualization } from '../virtualization/Virtualization';\nimport { TIME_PART } from './models';\nimport { SecondsService, MinutesService, HoursService, DayPeriodService, DOMService } from './services';\nimport { MAX_TIME, MIDNIGHT_DATE } from '../utils';\nvar SCROLL_THRESHOLD = 2; // < 2px threshold\n\nvar SNAP_THRESHOLD = 0.05; // % of the item height\n\nvar SKIP = 0;\nvar getters = (_a = {}, _a[Keys.end] = function (data, _) {\n  return data[data.length - 1];\n}, _a[Keys.home] = function (data, _) {\n  return data[0];\n}, _a[Keys.up] = function (data, index) {\n  return data[index - 1];\n}, _a[Keys.down] = function (data, index) {\n  return data[index + 1];\n}, _a);\nvar services = (_b = {}, _b[TIME_PART.dayperiod] = DayPeriodService, _b[TIME_PART.hour] = HoursService, _b[TIME_PART.minute] = MinutesService, _b[TIME_PART.second] = SecondsService, _b);\n/**\n * @hidden\n */\n\nvar TimeList =\n/** @class */\nfunction (_super) {\n  __extends(TimeList, _super);\n\n  function TimeList(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.animateToIndex = false;\n\n    _this.focus = function (args) {\n      Promise.resolve().then(function () {\n        if (!_this.element) {\n          return;\n        }\n\n        _this.element.focus(args);\n      });\n    };\n\n    _this.itemOffset = function (scrollTop) {\n      if (!_this.virtualization) {\n        return -1;\n      }\n\n      var valueIndex = _this.service.selectedIndex(_this.props.value);\n\n      var activeIndex = _this.virtualization.activeIndex();\n\n      var offset = _this.virtualization.itemOffset(activeIndex);\n\n      var distance = Math.abs(Math.ceil(scrollTop) - offset);\n\n      if (valueIndex === activeIndex && distance < SCROLL_THRESHOLD) {\n        return offset;\n      }\n\n      var scrollUp = valueIndex > activeIndex;\n      var moveToNext = scrollUp && distance >= _this.bottomThreshold || !scrollUp && distance > _this.topThreshold;\n      return moveToNext ? _this.virtualization.itemOffset(activeIndex + 1) : offset;\n    };\n\n    _this.calculateHeights = function () {\n      if (!_this.dom.didCalculate) {\n        return;\n      }\n\n      _this.itemHeight = _this.dom.itemHeight;\n      _this.listHeight = _this.dom.timeListHeight;\n      _this.topOffset = (_this.listHeight - _this.itemHeight) / 2;\n      _this.bottomOffset = _this.listHeight - _this.itemHeight;\n      _this.topThreshold = _this.itemHeight * SNAP_THRESHOLD;\n      _this.bottomThreshold = _this.itemHeight * (1 - SNAP_THRESHOLD);\n    };\n\n    _this.configureServices = function (_a) {\n      var _b = _a === void 0 ? _this.props : _a,\n          min = _b.min,\n          max = _b.max,\n          value = _b.value;\n\n      var _c = _this.service.limitRange(min || _this.min, max || _this.max, value || _this.props.value),\n          newMin = _c[0],\n          newMax = _c[1];\n\n      _this.service.configure(_this.serviceSettings({\n        min: newMin,\n        max: newMax\n      }));\n    };\n\n    _this.serviceSettings = function (settings) {\n      var defaults = {\n        boundRange: _this.props.boundRange || TimeList.defaultProps.boundRange,\n        insertUndividedMax: false,\n        min: cloneDate(_this.min),\n        max: cloneDate(_this.max),\n        part: _this.props.part,\n        step: _this.step\n      };\n      var result = Object.assign({}, defaults, settings);\n      result.boundRange = result.part.type !== 'hour' || _this.props.boundRange || TimeList.defaultProps.boundRange;\n      return result;\n    };\n\n    _this.handleScrollAction = function (_a) {\n      var target = _a.target,\n          animationInProgress = _a.animationInProgress;\n\n      if (!_this.virtualization) {\n        return;\n      }\n\n      if (target && !animationInProgress) {\n        _this.animateToIndex = false;\n\n        var index = _this.virtualization.itemIndex(_this.itemOffset(target.scrollTop));\n\n        var dataItem = _this.service.data(_this.props.value)[index];\n\n        _this.handleChange(dataItem);\n      }\n    };\n\n    _this.handleFocus = function (event) {\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus.call(undefined, event);\n      }\n    };\n\n    _this.handleBlur = function (event) {\n      var onBlur = _this.props.onBlur;\n\n      if (onBlur) {\n        onBlur.call(undefined, event);\n      }\n    };\n\n    _this.handleMouseOver = function () {\n      if (!_this._element) {\n        return;\n      }\n\n      if (document && document.activeElement !== _this._element) {\n        _this._element.focus({\n          preventScroll: true\n        });\n      }\n    };\n\n    _this.handleKeyDown = function (event) {\n      var keyCode = event.keyCode;\n\n      if (keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.end || keyCode === Keys.home) {\n        event.preventDefault();\n      }\n\n      var getter = getters[event.keyCode] || noop;\n      var dataItem = getter(_this.service.data(_this.props.value), _this.service.selectedIndex(_this.props.value));\n\n      if (dataItem) {\n        _this.handleChange(dataItem);\n      }\n    };\n\n    _this.handleChange = function (dataItem) {\n      var candidate = _this.service.apply(_this.props.value, dataItem.value);\n\n      if (_this.props.value.getTime() === candidate.getTime()) {\n        return;\n      }\n\n      _this.setState({\n        value: candidate\n      });\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange.call(undefined, candidate);\n      }\n    };\n\n    _this.dom = new DOMService();\n    return _this;\n  }\n\n  Object.defineProperty(TimeList.prototype, \"element\", {\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimeList.prototype, \"animate\", {\n    get: function get() {\n      return Boolean(this.props.smoothScroll && this.animateToIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimeList.prototype, \"min\", {\n    get: function get() {\n      return this.props.min || TimeList.defaultProps.min;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimeList.prototype, \"max\", {\n    get: function get() {\n      return this.props.max || TimeList.defaultProps.max;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimeList.prototype, \"step\", {\n    get: function get() {\n      return this.props.step !== undefined && this.props.step !== 0 ? Math.floor(this.props.step) : TimeList.defaultProps.step;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  TimeList.prototype.componentDidMount = function () {\n    var _this = this; // Async calculation of height to avoid animation cancellation\n\n\n    Promise.resolve().then(function () {\n      if (!_this._element) {\n        return;\n      }\n\n      _this.dom.calculateHeights(_this._element);\n\n      _this.forceUpdate();\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  TimeList.prototype.componentDidUpdate = function () {\n    if (!this.virtualization) {\n      return;\n    }\n\n    var index = this.service.selectedIndex(this.props.value);\n    this.virtualization[this.animate ? 'animateToIndex' : 'scrollToIndex'](index);\n    this.animateToIndex = true;\n  };\n  /**\n   * @hidden\n   */\n\n\n  TimeList.prototype.render = function () {\n    var _this = this;\n\n    if (!this.props.part.type || !services[this.props.part.type]) {\n      return;\n    }\n\n    this.calculateHeights();\n    this.intl = provideIntlService(this);\n    this.service = new services[this.props.part.type](this.intl);\n    this.configureServices();\n    var data = this.service.data(this.props.value);\n    var transform = 'translateY(' + this.topOffset + 'px)';\n    var total = this.service.total(this.props.value);\n    var list = React.createElement(\"ul\", {\n      style: {\n        transform: transform,\n        msTransform: transform\n      },\n      className: \"k-reset\"\n    }, data.map(function (item, idx) {\n      return React.createElement(\"li\", {\n        key: idx,\n        className: \"k-item\",\n        onClick: function onClick() {\n          _this.handleChange(item);\n        }\n      }, React.createElement(\"span\", null, item.text));\n    }));\n    return React.createElement(\"div\", {\n      className: \"k-time-list\",\n      id: String(this.props.id || ''),\n      tabIndex: this.props.disabled ? -1 : 0,\n      ref: function ref(el) {\n        _this._element = el;\n      },\n      onKeyDown: this.handleKeyDown,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onMouseOver: this.handleMouseOver\n    }, this.dom.didCalculate ? React.createElement(Virtualization, {\n      bottomOffset: this.bottomOffset,\n      children: list,\n      className: \"k-time-container\",\n      itemHeight: this.itemHeight,\n      maxScrollDifference: this.listHeight,\n      onScrollAction: this.handleScrollAction,\n      ref: function ref(el) {\n        _this.virtualization = el;\n      },\n      role: \"presentation\",\n      skip: SKIP,\n      tabIndex: -1,\n      take: total,\n      topOffset: this.topOffset,\n      total: total\n    }) : React.createElement(\"div\", {\n      className: \"k-time-container\"\n    }, list));\n  };\n\n  TimeList.propTypes = {\n    id: PropTypes.number,\n    max: PropTypes.instanceOf(Date),\n    min: PropTypes.instanceOf(Date),\n    part: function part(props, propName, componentName) {\n      var prop = props[propName];\n\n      if (!prop || !services[prop.type]) {\n        throw new Error(\"\\n                    Invalid prop '\" + propName + \"' supplied to \" + componentName + \".\\n                    Supported part types are hour|minute|second|dayperiod.\\n                \");\n      }\n    },\n    step: function step(props, propName, componentName) {\n      var prop = props[propName];\n\n      if (prop !== undefined && prop <= 0) {\n        throw new Error(\"\\n                    Invalid prop '\" + propName + \"' supplied to \" + componentName + \".\\n                    \" + propName + \" cannot be less than 1.\\n                \");\n      }\n    },\n    value: PropTypes.instanceOf(Date),\n    smoothScroll: PropTypes.bool\n  };\n  TimeList.defaultProps = {\n    boundRange: false,\n    max: MAX_TIME,\n    min: MIDNIGHT_DATE,\n    step: 1,\n    smoothScroll: true\n  };\n  return TimeList;\n}(React.Component);\n\nexport { TimeList };\nregisterForIntl(TimeList);","map":null,"metadata":{},"sourceType":"module"}