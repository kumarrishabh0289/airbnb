{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport * as ReactDOMServer from 'react-dom/server';\nimport { Slide } from '@progress/kendo-react-animation';\nimport { classNames, canUseDOM } from '@progress/kendo-react-common';\nimport { CollisionType, AlignPoint, throttle, FRAME_DURATION } from './util';\nimport { AlignService } from './services/alignService';\nimport { DOMService } from './services/domService';\nimport { PositionService } from './services/positionService';\nvar DEFAULT_OFFSET = {\n  left: -1000,\n  top: 0\n};\nvar ANIMATION_CONTAINER = 'k-animation-container';\nvar ANIMATION_CONTAINER_SHOWN = 'k-animation-container-shown';\nvar K_POPUP = 'k-popup';\n\nvar getHtmlElement = function getHtmlElement(source) {\n  return ReactDOM.findDOMNode(source);\n};\n\nvar Popup =\n/** @class */\nfunction (_super) {\n  __extends(Popup, _super);\n\n  function Popup(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._exitingAnimation = false;\n    _this._prevShow = false;\n\n    _this.onOpened = function () {\n      var element = getHtmlElement(_this);\n\n      if (_this.props.show) {\n        element.classList.add(ANIMATION_CONTAINER_SHOWN);\n      }\n\n      _this.attachRepositionHandlers(element);\n\n      if (_this.props.open) {\n        _this.props.open.call(undefined, {\n          target: _this\n        });\n      }\n\n      if (_this.props.onOpen) {\n        _this.props.onOpen.call(undefined, {\n          target: _this\n        });\n      }\n    };\n\n    _this.onClosing = function () {\n      if (!_this.props.show) {\n        var element = getHtmlElement(_this);\n        element.classList.remove(ANIMATION_CONTAINER_SHOWN);\n      }\n\n      _this.detachRepositionHandlers();\n    };\n\n    _this.onClosed = function () {\n      if (_this._exitingAnimation) {\n        _this._exitingAnimation = false;\n\n        _this.forceUpdate();\n      }\n\n      if (_this.props.close) {\n        _this.props.close.call(undefined, {\n          target: _this\n        });\n      }\n\n      if (_this.props.onClose) {\n        _this.props.onClose.call(undefined, {\n          target: _this\n        });\n      }\n    };\n\n    _this.position = function (settings, element, anchorElement) {\n      var anchorAlign = settings.anchorAlign,\n          popupAlign = settings.popupAlign,\n          collision = settings.collision,\n          offset = settings.offset;\n\n      var alignedOffset = _this._alignService.alignElement({\n        anchor: anchorElement,\n        element: element,\n        elementAlign: popupAlign,\n        anchorAlign: anchorAlign,\n        offset: offset\n      });\n\n      var result = _this._positionService.positionElement({\n        anchor: anchorElement,\n        anchorAlign: anchorAlign,\n        collisions: collision,\n        element: element,\n        currentLocation: alignedOffset,\n        elementAlign: popupAlign\n      });\n\n      return result;\n    };\n\n    _this._flipped = false;\n    _this._offset = _this.props.offset;\n    _this._prevShow = props.show;\n    _this._domService = new DOMService();\n    _this._alignService = new AlignService(_this._domService);\n    _this._positionService = new PositionService(_this._domService);\n    _this.onOpened = _this.onOpened.bind(_this);\n    _this.onClosing = _this.onClosing.bind(_this);\n    _this.reposition = throttle(_this.reposition.bind(_this), FRAME_DURATION);\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  Popup.prototype.componentDidUpdate = function () {\n    this._prevShow = this.props.show;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Popup.prototype.componentWillUnmount = function () {\n    this.detachRepositionHandlers();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Popup.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        popupClass = _a.popupClass,\n        show = _a.show,\n        id = _a.id,\n        _b = _a.appendTo,\n        appendTo = _b === void 0 ? canUseDOM ? document.body : undefined : _b;\n\n    if (show) {\n      var newPosition = this.calculatePosition(this.props, appendTo);\n      this._offset = newPosition.offset;\n      this._flipped = !!newPosition.flipped;\n    }\n\n    var direction = this._flipped && show ? 'up' : 'down';\n    var _c = this.transitionDuration,\n        transitionEnterDuration = _c.transitionEnterDuration,\n        transitionExitDuration = _c.transitionExitDuration;\n    var style = Object.assign({}, {\n      position: 'absolute'\n    }, this.props.style || {}, __assign({}, this._offset));\n    this._exitingAnimation = this._exitingAnimation || this._prevShow && !show;\n\n    if ((show || this._exitingAnimation) && appendTo) {\n      var popup = React.createElement(Slide, {\n        componentChildClassName: classNames(popupClass, K_POPUP),\n        className: classNames(className),\n        id: id,\n        onEntered: this.onOpened,\n        onExiting: this.onClosing,\n        onExited: this.onClosed,\n        direction: direction,\n        style: style,\n        transitionEnterDuration: transitionEnterDuration,\n        transitionExitDuration: transitionExitDuration,\n        appear: true\n      }, show ? children : null);\n      return ReactDOM.createPortal(popup, appendTo);\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(Popup.prototype, \"transitionDuration\", {\n    get: function get() {\n      var animate = this.props.animate;\n      var transitionEnterDuration = 0;\n      var transitionExitDuration = 0;\n\n      if (animate) {\n        if (animate === true) {\n          // Inherit the default duration of the Animation component.\n          transitionEnterDuration = transitionExitDuration = undefined;\n        } else {\n          transitionEnterDuration = animate.openDuration;\n          transitionExitDuration = animate.closeDuration;\n        }\n      }\n\n      return {\n        transitionEnterDuration: transitionEnterDuration,\n        transitionExitDuration: transitionExitDuration\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Popup.prototype.calculatePosition = function (props, appendTo) {\n    if (!appendTo || !canUseDOM) {\n      return {\n        flipped: false,\n        offset: props.offset\n      };\n    }\n\n    var root = document.createElement('div');\n    appendTo.appendChild(root);\n    var style = Object.assign({}, props.style || {}, __assign({\n      visibility: 'hidden'\n    }, DEFAULT_OFFSET));\n    var innerClasses = {\n      className: classNames(props.popupClass, K_POPUP, 'k-child-animation-container')\n    };\n    var popup = React.createElement(\"div\", {\n      className: classNames(ANIMATION_CONTAINER, ANIMATION_CONTAINER_SHOWN, props.className),\n      style: style\n    }, React.Children.map(props.children, function (child, index) {\n      return React.createElement(\"div\", __assign({\n        key: index\n      }, innerClasses), child);\n    }));\n    root.innerHTML = ReactDOMServer.renderToStaticMarkup(popup);\n    var newPosition = this.position(props, root.firstChild, props.anchor);\n    root.parentNode.removeChild(root);\n    return newPosition;\n  };\n\n  Popup.prototype.attachRepositionHandlers = function (element) {\n    var _this = this;\n\n    this.detachRepositionHandlers();\n    this._scrollableParents = this._domService.scrollableParents(this.props.anchor || element);\n\n    this._scrollableParents.map(function (p) {\n      return p.addEventListener('scroll', _this.reposition);\n    });\n\n    window.addEventListener('resize', this.reposition);\n  };\n\n  Popup.prototype.detachRepositionHandlers = function () {\n    var _this = this;\n\n    if (this._scrollableParents) {\n      this._scrollableParents.map(function (p) {\n        return p.removeEventListener('scroll', _this.reposition);\n      });\n\n      this._scrollableParents = undefined;\n    }\n\n    window.removeEventListener('resize', this.reposition);\n  };\n\n  Popup.prototype.reposition = function () {\n    this.forceUpdate();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Popup.propTypes = {\n    anchor: function anchor(props) {\n      var anchor = props.anchor;\n\n      if (anchor && typeof anchor.nodeType !== 'number') {\n        return new Error('Invalid prop `anchor` supplied to `Kendo React Popup`. Validation failed.');\n      }\n    },\n    appendTo: function appendTo(props) {\n      var element = props.appendTo;\n\n      if (element && typeof element.nodeType !== 'number') {\n        return new Error('Invalid prop `appendTo` supplied to `Kendo React Popup`. Validation failed.');\n      }\n    },\n    className: PropTypes.string,\n    id: PropTypes.string,\n    popupClass: PropTypes.string,\n    collision: PropTypes.shape({\n      horizontal: PropTypes.oneOf([CollisionType.fit, CollisionType.flip]),\n      vertical: PropTypes.oneOf([CollisionType.fit, CollisionType.flip])\n    }),\n    anchorAlign: PropTypes.shape({\n      horizontal: PropTypes.oneOf([AlignPoint.left, AlignPoint.center, AlignPoint.right]),\n      vertical: PropTypes.oneOf([AlignPoint.top, AlignPoint.center, AlignPoint.bottom])\n    }),\n    popupAlign: PropTypes.shape({\n      horizontal: PropTypes.oneOf([AlignPoint.left, AlignPoint.center, AlignPoint.right]),\n      vertical: PropTypes.oneOf([AlignPoint.top, AlignPoint.center, AlignPoint.bottom])\n    }),\n    offset: PropTypes.shape({\n      left: PropTypes.number,\n      top: PropTypes.number\n    }),\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.node]),\n    show: PropTypes.bool,\n    animate: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n      openDuration: PropTypes.number,\n      closeDuration: PropTypes.number\n    })])\n  };\n  /**\n   * @hidden\n   */\n\n  Popup.defaultProps = {\n    collision: {\n      horizontal: CollisionType.fit,\n      vertical: CollisionType.flip\n    },\n    anchorAlign: {\n      horizontal: AlignPoint.left,\n      vertical: AlignPoint.bottom\n    },\n    popupAlign: {\n      horizontal: AlignPoint.left,\n      vertical: AlignPoint.top\n    },\n    offset: DEFAULT_OFFSET,\n    animate: true,\n    show: false\n  };\n  return Popup;\n}(React.Component);\n\nexport default Popup;","map":null,"metadata":{},"sourceType":"module"}