{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, noop } from '@progress/kendo-react-common';\nimport { CSSTransition } from 'react-transition-group';\nimport util from './util';\nvar styles = util.styles;\n\nvar AnimationChild =\n/** @class */\nfunction (_super) {\n  __extends(AnimationChild, _super);\n\n  function AnimationChild() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(AnimationChild.prototype, \"element\", {\n    /**\n     * The element that is being animated.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  AnimationChild.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        children = _a.children,\n        style = _a.style,\n        appear = _a.appear,\n        enter = _a.enter,\n        exit = _a.exit,\n        transitionName = _a.transitionName,\n        transitionEnterDuration = _a.transitionEnterDuration,\n        transitionExitDuration = _a.transitionExitDuration,\n        className = _a.className,\n        _onEnter = _a.onEnter,\n        _onEntering = _a.onEntering,\n        _onEntered = _a.onEntered,\n        _onExit = _a.onExit,\n        _onExiting = _a.onExiting,\n        _onExited = _a.onExited,\n        mountOnEnter = _a.mountOnEnter,\n        unmountOnExit = _a.unmountOnExit,\n        animationEnteringStyle = _a.animationEnteringStyle,\n        animationEnteredStyle = _a.animationEnteredStyle,\n        animationExitingStyle = _a.animationExitingStyle,\n        animationExitedStyle = _a.animationExitedStyle,\n        other = __rest(_a, [\"children\", \"style\", \"appear\", \"enter\", \"exit\", \"transitionName\", \"transitionEnterDuration\", \"transitionExitDuration\", \"className\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"animationEnteringStyle\", \"animationEnteredStyle\", \"animationExitingStyle\", \"animationExitedStyle\"]);\n\n    var childAnimationContainerClassNames = classNames(className, styles['child-animation-container']);\n\n    var defaultStyle = __assign({\n      transitionDelay: '0ms'\n    }, style);\n\n    var animationStyle = {\n      entering: __assign({\n        transitionDuration: transitionEnterDuration + \"ms\"\n      }, animationEnteringStyle),\n      entered: __assign({}, animationEnteredStyle),\n      exiting: __assign({\n        transitionDuration: transitionExitDuration + \"ms\"\n      }, animationExitingStyle),\n      exited: __assign({}, animationExitedStyle)\n    };\n    var transitionProps = {\n      in: this.props.in,\n      appear: appear,\n      enter: enter,\n      exit: exit,\n      mountOnEnter: mountOnEnter,\n      unmountOnExit: unmountOnExit,\n      timeout: {\n        enter: transitionEnterDuration,\n        exit: transitionExitDuration\n      },\n      onEnter: function onEnter(e) {\n        if (_onEnter) {\n          _onEnter.call(undefined, {\n            animatedElement: e,\n            target: _this\n          });\n        }\n      },\n      onEntering: function onEntering(e) {\n        if (_onEntering) {\n          _onEntering.call(undefined, {\n            animatedElement: e,\n            target: _this\n          });\n        }\n      },\n      onEntered: function onEntered(e) {\n        if (_onEntered) {\n          _onEntered.call(undefined, {\n            animatedElement: e,\n            target: _this\n          });\n        }\n      },\n      onExit: function onExit(e) {\n        if (_onExit) {\n          _onExit.call(undefined, {\n            animatedElement: e,\n            target: _this\n          });\n        }\n      },\n      onExiting: function onExiting(e) {\n        if (_onExiting) {\n          _onExiting.call(undefined, {\n            animatedElement: e,\n            target: _this\n          });\n        }\n      },\n      onExited: function onExited(e) {\n        if (_onExited) {\n          _onExited.call(undefined, {\n            animatedElement: e,\n            target: _this\n          });\n        }\n      },\n      classNames: {\n        appear: styles[transitionName + \"-appear\"] || transitionName + \"-appear\",\n        appearActive: styles[transitionName + \"-appear-active\"] || transitionName + \"-appear-active\",\n        enter: styles[transitionName + \"-enter\"] || transitionName + \"-enter\",\n        enterActive: styles[transitionName + \"-enter-active\"] || transitionName + \"-enter-active\",\n        exit: styles[transitionName + \"-exit\"] || transitionName + \"-exit\",\n        exitActive: styles[transitionName + \"-exit-active\"] || transitionName + \"-exit-active\"\n      }\n    };\n    return React.createElement(CSSTransition, __assign({}, transitionProps, other), function (status) {\n      return React.createElement(\"div\", {\n        style: __assign({}, defaultStyle, animationStyle[status]),\n        className: childAnimationContainerClassNames,\n        ref: function ref(div) {\n          _this._element = div;\n        }\n      }, children);\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  AnimationChild.propTypes = {\n    in: PropTypes.bool,\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n    transitionName: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    appear: PropTypes.bool,\n    enter: PropTypes.bool,\n    exit: PropTypes.bool,\n    transitionEnterDuration: PropTypes.number.isRequired,\n    transitionExitDuration: PropTypes.number.isRequired,\n    mountOnEnter: PropTypes.bool,\n    unmountOnExit: PropTypes.bool,\n    animationEnteringStyle: PropTypes.object,\n    animationEnteredStyle: PropTypes.object,\n    animationExitingStyle: PropTypes.object,\n    animationExitedStyle: PropTypes.object\n  };\n  /**\n   * @hidden\n   */\n\n  AnimationChild.defaultProps = {\n    mountOnEnter: true,\n    unmountOnExit: false,\n    onEnter: noop,\n    onEntering: noop,\n    onEntered: noop,\n    onExit: noop,\n    onExiting: noop,\n    onExited: noop,\n    animationEnteringStyle: {},\n    animationEnteredStyle: {},\n    animationExitingStyle: {},\n    animationExitedStyle: {}\n  };\n  return AnimationChild;\n}(React.Component);\n\nexport { AnimationChild };","map":null,"metadata":{},"sourceType":"module"}