{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { registerForIntl, provideIntlService, registerForLocalization, provideLocalizationService } from '@progress/kendo-react-intl';\nimport { classNames, guid, Keys } from '@progress/kendo-react-common';\nimport { cloneDate, isEqualDate, getDate } from '@progress/kendo-date-math';\nimport { Action, CalendarViewEnum, EMPTY_SELECTIONRANGE } from '../models';\nimport { MIN_DATE, MAX_DATE } from '../../defaults';\nimport { messages, prevView, nextView } from '../../messages';\nimport { BusViewService, NavigationService } from '../services';\nimport { dateInRange, isInRange, viewInRange, getToday } from '../../utils';\nimport { HorizontalViewList } from './HorizontalViewList';\n\nvar extractDateFromValue = function extractDateFromValue(min, max, value) {\n  if (min === void 0) {\n    min = MultiViewCalendar.defaultProps.min;\n  }\n\n  if (max === void 0) {\n    max = MultiViewCalendar.defaultProps.max;\n  }\n\n  return value instanceof Date && !Array.isArray(value) && isInRange(getDate(value), min, max) ? getDate(value) : null;\n};\n\nvar extractMultipleFromValue = function extractMultipleFromValue(min, max, value) {\n  if (min === void 0) {\n    min = MultiViewCalendar.defaultProps.min;\n  }\n\n  if (max === void 0) {\n    max = MultiViewCalendar.defaultProps.max;\n  }\n\n  return Array.isArray(value) ? value.filter(function (date) {\n    return isInRange(date, min, max);\n  }).map(function (date) {\n    return getDate(date);\n  }) : null;\n};\n\nvar extractRangeFromValue = function extractRangeFromValue(value) {\n  return typeof value === 'object' && !(value instanceof Date) && value !== null && !Array.isArray(value) ? value : EMPTY_SELECTIONRANGE;\n};\n\nvar extractFocusedDate = function extractFocusedDate(single, multiple, range) {\n  return single || multiple && multiple[0] || range && range.start;\n};\n\nvar extractActiveRange = function extractActiveRange(range, single) {\n  return range.start === null && single === null ? 'start' : range.end === null ? 'end' : 'start';\n};\n\nvar MultiViewCalendar =\n/** @class */\nfunction (_super) {\n  __extends(MultiViewCalendar, _super);\n\n  function MultiViewCalendar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.selectedDate = null;\n    _this.selectedMultiple = null;\n    _this.selectedRange = EMPTY_SELECTIONRANGE;\n    _this.cellUID = guid();\n    _this.activeRangeEnd = 'start';\n    _this.wrapperID = guid();\n    _this.isActive = false;\n    _this.calculateFocusFromValue = true;\n\n    _this.clampRange = function (value) {\n      return {\n        start: value,\n        end: null\n      };\n    };\n\n    _this.rangeWithFocused = function (range, focusedDate) {\n      return {\n        start: range.start,\n        end: range.end === null && range.start !== null && _this.isActive ? focusedDate : range.end\n      };\n    };\n\n    _this.generateRange = function (candidate, value) {\n      var end = value.end,\n          start = value.start;\n      var shouldSwap = value.start !== null && candidate.getTime() <= value.start.getTime();\n\n      if (!_this.props.allowReverse && shouldSwap) {\n        return {\n          start: candidate,\n          end: _this.selectedRange.start\n        };\n      }\n\n      return _this.activeRange !== 'end' ? {\n        start: candidate,\n        end: end\n      } : {\n        start: start || _this.selectedDate,\n        end: candidate\n      };\n    };\n\n    _this.canNavigate = function (action) {\n      if (!_this.service) {\n        return false;\n      }\n\n      var candidate = _this.service.move(_this.focusedDate, action);\n\n      return _this.min <= candidate && candidate <= _this.max || _this.service.isInSameView(candidate, _this.min) || _this.service.isInSameView(candidate, _this.max);\n    };\n\n    _this.isListInRange = function (list) {\n      return _this.min < list[0] && _this.max > list[Math.max(0, (_this.props.views || MultiViewCalendar.defaultProps.views) - 1)];\n    };\n\n    _this.navigate = function (action) {\n      _this.calculateFocusFromValue = false;\n\n      var candidate = _this.move(action);\n\n      _this.setState({\n        focusedDate: candidate\n      });\n    };\n\n    _this.move = function (action) {\n      return _this.clampDate(_this.service.move(_this.focusedDate, action));\n    };\n\n    _this.clampDate = function (value) {\n      return dateInRange(value, _this.min, _this.max);\n    };\n\n    _this.shouldAutoCorrect = function (candidate, value) {\n      var end = value.end,\n          start = value.start;\n\n      if (_this.activeRange !== 'end') {\n        return end !== null && candidate > end;\n      } else {\n        return start !== null && candidate < start;\n      }\n    };\n\n    _this.handleCellEnter = function (value) {\n      if (_this.props.mode === 'range') {\n        _this.calculateFocusFromValue = false;\n\n        _this.setState({\n          focusedDate: value\n        });\n      }\n    };\n\n    _this.handleMouseDown = function (event) {\n      event.preventDefault();\n    };\n\n    _this.handleClick = function (_) {\n      if (!_this._element) {\n        return;\n      }\n\n      _this._element.focus({\n        preventScroll: true\n      });\n    };\n\n    _this.handleFocus = function (event) {\n      _this.isActive = true;\n\n      if (!_this.calendarViewList) {\n        return;\n      }\n\n      _this.calendarViewList.focusActiveDate();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus.call(undefined, event);\n      }\n    };\n\n    _this.handleBlur = function (event) {\n      _this.isActive = false;\n\n      if (!_this.calendarViewList) {\n        return;\n      }\n\n      _this.calendarViewList.blurActiveDate();\n\n      var onBlur = _this.props.onBlur;\n\n      if (onBlur) {\n        onBlur.call(undefined, event);\n      }\n    };\n\n    _this.handlePrevButtonClick = function () {\n      _this.navigate(Action.PrevView);\n    };\n\n    _this.handleNextButtonClick = function () {\n      _this.navigate(Action.NextView);\n    };\n\n    _this.handleKeyDown = function (event) {\n      var keyCode = event.keyCode;\n\n      if (keyCode === Keys.enter) {\n        var args = {\n          syntheticEvent: event,\n          nativeEvent: event.nativeEvent,\n          value: _this.focusedDate,\n          target: _this\n        };\n\n        _this.handleDateChange.call(undefined, args);\n      } else {\n        var candidate = dateInRange(_this.navigation.move(_this.focusedDate, _this.navigation.action(event), _this.state.activeView, _this.service, event), _this.min, _this.max);\n\n        if (isEqualDate(_this.focusedDate, candidate)) {\n          return;\n        }\n\n        _this.calculateFocusFromValue = false;\n\n        _this.setState({\n          focusedDate: candidate\n        });\n      }\n\n      event.preventDefault();\n    };\n\n    _this.handleViewChange = function (_a) {\n      var view = _a.view;\n\n      _this.setState({\n        activeView: view\n      });\n    };\n\n    _this.handleDateChange = function (event) {\n      var focusedDate = cloneDate(event.value);\n\n      var canNavigateDown = _this.bus.canMoveDown(_this.state.activeView);\n\n      if (_this.props.disabled) {\n        return;\n      }\n\n      if (canNavigateDown) {\n        if (event.isTodayClick) {\n          _this.bus.moveToBottom(_this.state.activeView);\n        } else {\n          _this.bus.moveDown(_this.state.activeView, event.syntheticEvent);\n\n          _this.setState({\n            focusedDate: focusedDate\n          });\n\n          return;\n        }\n      }\n\n      _this.calculateFocusFromValue = true;\n      var value;\n\n      switch (_this.props.mode) {\n        case 'single':\n          value = cloneDate(event.value);\n          break;\n\n        case 'multiple':\n          if (Array.isArray(_this.selectedMultiple)) {\n            var result = _this.selectedMultiple.slice();\n\n            var index_1 = -1;\n            result.forEach(function (date, idx) {\n              if (isEqualDate(date, event.value)) {\n                index_1 = idx;\n              }\n            });\n            index_1 !== -1 ? result.splice(index_1, 1) : result.push(cloneDate(event.value));\n            value = result.slice();\n          } else {\n            if (_this.selectedDate) {\n              value = [cloneDate(_this.selectedDate), cloneDate(event.value)];\n            } else {\n              value = [cloneDate(event.value)];\n            }\n          }\n\n          break;\n\n        case 'range':\n          var hasSelection = _this.selectedRange.start !== null && _this.selectedRange.end !== null && _this.activeRange === 'start';\n          value = hasSelection ? _this.clampRange(event.value) : _this.generateRange(event.value, _this.selectedRange);\n          _this.activeRangeEnd = _this.activeRange !== 'end' ? 'end' : 'start';\n          break;\n\n        default:\n          value = cloneDate(event.value);\n          break;\n      }\n\n      _this.valueDuringOnChange = value;\n\n      _this.setState({\n        value: value,\n        focusedDate: focusedDate\n      });\n\n      _this.valueDuringOnChange = value;\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        var args = {\n          syntheticEvent: event.syntheticEvent,\n          nativeEvent: event.nativeEvent,\n          value: value,\n          target: _this\n        };\n        onChange.call(undefined, args);\n      }\n\n      _this.valueDuringOnChange = undefined;\n    };\n\n    var value = props.value !== undefined ? props.value : props.defaultValue || MultiViewCalendar.defaultProps.defaultValue;\n    var selectedDate = extractDateFromValue(_this.min, _this.max, value);\n    var selectedMultiple = extractMultipleFromValue(_this.min, _this.max, value);\n    var selectedRange = extractRangeFromValue(value);\n    var calculatedFocus = extractFocusedDate(selectedDate, selectedMultiple, selectedRange);\n    var activeView = viewInRange(CalendarViewEnum[props.defaultActiveView], _this.bottomView, _this.topView);\n    var focusedDate = dateInRange(props.focusedDate || calculatedFocus || getToday(), _this.min, _this.max);\n    _this.state = {\n      value: value,\n      activeView: activeView,\n      focusedDate: focusedDate\n    };\n    _this.activeRangeEnd = extractActiveRange(selectedRange, selectedDate);\n    _this.bus = new BusViewService(_this.handleViewChange);\n    _this.navigation = new NavigationService(_this.bus);\n    _this.calculateFocusFromValue = false;\n    return _this;\n  }\n\n  Object.defineProperty(MultiViewCalendar.prototype, \"element\", {\n    /**\n     * Gets the wrapping element of the MultiViewCalendar component.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiViewCalendar.prototype, \"value\", {\n    /**\n     * Gets the value of the MultiViewCalendar.\n     */\n    get: function get() {\n      return this.valueDuringOnChange !== undefined ? this.valueDuringOnChange : this.props.value !== undefined ? this.props.value : this.state.value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiViewCalendar.prototype, \"focusedDate\", {\n    /**\n     * Gets the current focused date of the MultiViewCalendar.\n     */\n    get: function get() {\n      return cloneDate(this._focusedDate);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiViewCalendar.prototype, \"min\", {\n    get: function get() {\n      return getDate(this.props.min !== undefined ? this.props.min : MultiViewCalendar.defaultProps.min);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiViewCalendar.prototype, \"max\", {\n    get: function get() {\n      return getDate(this.props.max !== undefined ? this.props.max : MultiViewCalendar.defaultProps.max);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiViewCalendar.prototype, \"bottomView\", {\n    get: function get() {\n      return CalendarViewEnum[this.props.bottomView !== undefined ? this.props.bottomView : MultiViewCalendar.defaultProps.bottomView];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiViewCalendar.prototype, \"topView\", {\n    get: function get() {\n      return CalendarViewEnum[this.props.topView !== undefined ? this.props.topView : MultiViewCalendar.defaultProps.topView];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultiViewCalendar.prototype, \"activeRange\", {\n    get: function get() {\n      return this.props.activeRangeEnd !== undefined ? this.props.activeRangeEnd : this.activeRangeEnd;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  MultiViewCalendar.prototype.componentDidMount = function () {\n    this.calculateFocusFromValue = true;\n  };\n  /**\n   * @hidden\n   */\n\n\n  MultiViewCalendar.prototype.componentDidUpdate = function () {\n    if (this.calendarViewList) {\n      this.isActive ? this.calendarViewList.focusActiveDate() : this.calendarViewList.blurActiveDate();\n    }\n\n    this.calculateFocusFromValue = false;\n  };\n  /**\n   * @hidden\n   */\n\n\n  MultiViewCalendar.prototype.focus = function () {\n    if (this._element) {\n      this._element.focus();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  MultiViewCalendar.prototype.render = function () {\n    var _this = this;\n\n    this.intl = provideIntlService(this);\n    this.localization = provideLocalizationService(this);\n    this.bus.configure(this.bottomView, this.topView);\n    var activeView = viewInRange(this.state.activeView, this.bottomView, this.topView);\n    this.service = this.bus.service(activeView, this.intl);\n    this.selectedDate = extractDateFromValue(this.min, this.max, this.value);\n    this.selectedMultiple = extractMultipleFromValue(this.min, this.max, this.value);\n    this.selectedRange = extractRangeFromValue(this.value);\n    var calculatedFocus = extractFocusedDate(this.selectedDate, this.selectedMultiple, this.selectedRange);\n    this._focusedDate = dateInRange(this.calculateFocusFromValue && calculatedFocus !== null ? calculatedFocus : this.state.focusedDate, this.min, this.max);\n    var wrapperClassName = classNames('k-widget k-calendar k-calendar-infinite k-calendar-range', {\n      'k-state-disabled': this.props.disabled\n    }, this.props.className);\n    var visualizedRange = this.rangeWithFocused(this.selectedRange, this.focusedDate);\n    var wrapperAria = {\n      'aria-disabled': this.props.disabled,\n      'aria-activedescendant': this.cellUID + this.focusedDate.getTime()\n    };\n    var prevViewTitle = this.localization.toLanguageString(prevView, messages[prevView]);\n    var nextViewTittle = this.localization.toLanguageString(nextView, messages[nextView]);\n    var isPrevDisabled = !this.canNavigate(Action.PrevView);\n    var isNextDisabled = !this.canNavigate(Action.NextView);\n    var prevBtnAria = {\n      'aria-disabled': isPrevDisabled\n    };\n    var nextBtnAria = {\n      'aria-disabled': isNextDisabled\n    };\n    return React.createElement(\"div\", __assign({\n      ref: function ref(el) {\n        _this._element = el;\n      },\n      className: wrapperClassName,\n      id: this.props.id || this.wrapperID,\n      role: 'grid',\n      tabIndex: !this.props.disabled ? this.props.tabIndex : undefined,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onMouseDown: this.handleMouseDown,\n      onClick: this.handleClick,\n      onKeyDown: this.handleKeyDown\n    }, wrapperAria), React.createElement(\"button\", __assign({\n      className: \"k-button k-prev-view\",\n      title: prevViewTitle,\n      disabled: isPrevDisabled,\n      onClick: this.handlePrevButtonClick\n    }, prevBtnAria), React.createElement(\"span\", {\n      className: \"k-icon k-i-arrow-chevron-left\"\n    })), React.createElement(HorizontalViewList, {\n      ref: function ref(el) {\n        _this.calendarViewList = el;\n      },\n      activeView: activeView,\n      focusedDate: this.focusedDate,\n      min: this.min,\n      max: this.max,\n      bus: this.bus,\n      service: this.service,\n      selectionRange: visualizedRange,\n      value: this.selectedMultiple || this.selectedDate,\n      cellUID: this.cellUID,\n      views: this.props.views,\n      onChange: this.handleDateChange,\n      showWeekNumbers: this.props.weekNumber,\n      onCellEnter: this.handleCellEnter,\n      cell: this.props.cell,\n      weekCell: this.props.weekCell,\n      headerTitle: this.props.headerTitle\n    }), React.createElement(\"button\", __assign({\n      className: \"k-button k-next-view\",\n      title: nextViewTittle,\n      disabled: isNextDisabled,\n      onClick: this.handleNextButtonClick\n    }, nextBtnAria), React.createElement(\"span\", {\n      className: \"k-icon k-i-arrow-chevron-right\"\n    })));\n  };\n  /**\n   * @hidden\n   */\n\n\n  MultiViewCalendar.propTypes = {\n    activeRangeEnd: PropTypes.oneOf(['start', 'end']),\n    allowReverse: PropTypes.bool,\n    bottomView: PropTypes.oneOf(['month', 'year', 'decade', 'century']),\n    className: PropTypes.string,\n    defaultActiveView: PropTypes.oneOf(['month', 'year', 'decade', 'century']),\n    defaultValue: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date)), PropTypes.shape({\n      start: PropTypes.instanceOf(Date),\n      end: PropTypes.instanceOf(Date)\n    })]),\n    disabled: PropTypes.bool,\n    focusedDate: PropTypes.instanceOf(Date),\n    id: PropTypes.string,\n    max: PropTypes.instanceOf(Date),\n    min: PropTypes.instanceOf(Date),\n    mode: PropTypes.oneOf(['single', 'multiple', 'range']),\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    tabIndex: PropTypes.number,\n    topView: PropTypes.oneOf(['month', 'year', 'decade', 'century']),\n    value: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date)), PropTypes.shape({\n      start: PropTypes.instanceOf(Date),\n      end: PropTypes.instanceOf(Date)\n    })]),\n    views: function views(props, propName, componentName) {\n      var views = props[propName];\n\n      if (views !== undefined && views < 1) {\n        return new Error(\"Invalid prop '\" + propName + \"' supplied to\" + (\"'\" + componentName + \"'. The '\" + propName + \"' property cannot be less than 1'\"));\n      }\n    },\n    weekNumber: PropTypes.bool\n  };\n  /**\n   * @hidden\n   */\n\n  MultiViewCalendar.defaultProps = {\n    disabled: false,\n    min: MIN_DATE,\n    max: MAX_DATE,\n    navigation: true,\n    defaultActiveView: 'month',\n    defaultValue: null,\n    topView: 'century',\n    tabIndex: 0,\n    bottomView: 'month',\n    views: 2,\n    allowReverse: false\n  };\n  return MultiViewCalendar;\n}(React.Component);\n\nexport { MultiViewCalendar };\nregisterForIntl(MultiViewCalendar);\nregisterForLocalization(MultiViewCalendar);","map":null,"metadata":{},"sourceType":"module"}