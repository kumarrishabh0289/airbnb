{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { cloneDate } from '@progress/kendo-date-math';\nimport { classNames, guid, Keys } from '@progress/kendo-react-common';\nimport { registerForLocalization, provideLocalizationService } from '@progress/kendo-react-intl';\nimport { messages, toggleTimeSelector, toggleClock } from '../messages';\nimport { DateInput } from '../dateinput/DateInput';\nimport { TimeSelector } from './TimeSelector';\nimport { MIDNIGHT_DATE, MIN_TIME, MAX_TIME, setTime } from '../utils';\nimport { isInRange, isSmallerThanMin, isBiggerThanMax } from './utils';\n\nvar TimePicker =\n/** @class */\nfunction (_super) {\n  __extends(TimePicker, _super);\n\n  function TimePicker(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._popupId = guid();\n    _this._element = null;\n    _this._wrapper = null;\n    _this._dateInput = null;\n    _this._timeSelector = null;\n    _this.shouldFocusDateInput = false; // Using `this` to avoid bumping the React version\n    // to 16.3 and use `createRef()`.\n    // Inline arrow functions is a performance hit\n    // so... we use `this`.\n\n    _this.setDateInputRef = function (dateInput) {\n      _this._dateInput = dateInput;\n    };\n\n    _this.setTimeSelectorRef = function (timeSelector) {\n      _this._timeSelector = timeSelector;\n    };\n\n    _this.nextValue = function (nextProps, nextState) {\n      return nextProps.value !== undefined ? nextProps.value : nextState.value;\n    };\n\n    _this.nextShow = function (nextProps, nextState) {\n      return nextProps.show !== undefined ? nextProps.show : nextState.show;\n    };\n\n    _this.handleInputValueChange = function (event) {\n      var value = _this.mergeTime(event.value);\n\n      _this.handleValueChange(__assign({}, event, {\n        value: value\n      }));\n    };\n\n    _this.handleValueChange = function (event) {\n      _this.setState({\n        value: cloneDate(event.value),\n        show: false\n      });\n\n      _this.valueDuringOnChange = event.value;\n      _this.showDuringOnChange = false;\n      _this.shouldFocusDateInput = true;\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange.call(undefined, {\n          syntheticEvent: event.syntheticEvent,\n          nativeEvent: event.nativeEvent,\n          value: _this.value,\n          show: _this.show,\n          target: _this\n        });\n      }\n\n      _this.valueDuringOnChange = undefined;\n      _this.showDuringOnChange = undefined;\n    };\n\n    _this.handleFocus = function (event) {\n      clearTimeout(_this.nextTickId);\n\n      if (_this._wrapper) {\n        _this._wrapper.classList.add('k-state-focused');\n      }\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus.call(undefined, event);\n      }\n    };\n\n    _this.handleBlur = function (event) {\n      _this.nextTick(function () {\n        if (_this._wrapper) {\n          _this._wrapper.classList.remove('k-state-focused');\n        }\n\n        _this.setShow(false);\n      });\n\n      var onBlur = _this.props.onBlur;\n\n      if (onBlur) {\n        onBlur.call(undefined, event);\n      }\n    };\n\n    _this.handleValueReject = function (_) {\n      _this.setShow(false);\n    };\n\n    _this.handleIconClick = function (_) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.shouldFocusDateInput = true;\n\n      _this.setShow(!_this.show);\n    };\n\n    _this.handleIconMouseDown = function (event) {\n      event.preventDefault();\n    };\n\n    _this.handleKeyDown = function (event) {\n      var altKey = event.altKey,\n          keyCode = event.keyCode;\n\n      if (keyCode === Keys.esc) {\n        _this.setShow(false);\n\n        return;\n      }\n\n      if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {\n        event.preventDefault();\n        event.stopPropagation();\n        _this.shouldFocusDateInput = keyCode === Keys.up;\n\n        _this.setShow(keyCode === Keys.down);\n      }\n    };\n\n    _this.state = {\n      value: _this.props.defaultValue || TimePicker.defaultProps.defaultValue,\n      show: _this.props.defaultShow || TimePicker.defaultProps.defaultShow\n    };\n    _this.normalizeTime = _this.normalizeTime.bind(_this);\n    _this.setShow = _this.setShow.bind(_this);\n    _this.nextTick = _this.nextTick.bind(_this);\n    _this.mergeTime = _this.mergeTime.bind(_this);\n    return _this;\n  }\n\n  Object.defineProperty(TimePicker.prototype, \"element\", {\n    /**\n     * Gets the wrapping element of the TimePicker.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"dateInput\", {\n    /**\n     * Gets the DateInput component inside the TimePicker component.\n     */\n    get: function get() {\n      return this._dateInput;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"timeSelector\", {\n    /**\n     * Gets the TimeSelector component inside the TimePicker component.\n     */\n    get: function get() {\n      return this._timeSelector;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"value\", {\n    /**\n     * Gets the value of the TimePicker.\n     */\n    get: function get() {\n      var value = this.valueDuringOnChange !== undefined ? this.valueDuringOnChange : this.props.value !== undefined ? this.props.value : this.state.value;\n      return value !== null ? cloneDate(value) : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"show\", {\n    /**\n     * Gets the popup state of the TimeSelector.\n     */\n    get: function get() {\n      return this.showDuringOnChange !== undefined ? this.showDuringOnChange : this.props.show !== undefined ? this.props.show : this.state.show;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the TimePicker.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the TimePicker is set.\n     */\n    get: function get() {\n      var value = this.value && this.normalizeTime(this.value);\n      var min = this.normalizeTime(this.min);\n      var max = this.normalizeTime(this.max);\n      var inRange = isInRange(value, min, max);\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = (!this.required || this.value !== null) && inRange;\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        rangeOverflow: isBiggerThanMax(value, max),\n        rangeUnderflow: isSmallerThanMin(value, min),\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"validityStyles\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : TimePicker.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : TimePicker.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"popupSettings\", {\n    get: function get() {\n      return this.props.popupSettings || TimePicker.defaultProps.popupSettings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"min\", {\n    get: function get() {\n      return this.props.min !== undefined ? this.props.min : TimePicker.defaultProps.min;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimePicker.prototype, \"max\", {\n    get: function get() {\n      return this.props.max !== undefined ? this.props.max : TimePicker.defaultProps.max;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  TimePicker.prototype.componentDidMount = function () {\n    if (this.show) {\n      // If defaultShow is true during the initial render, the popup is not aligned.\n      this.forceUpdate();\n    }\n\n    if (this._dateInput && this._dateInput.element) {\n      this._dateInput.element.setAttribute('aria-haspopup', 'true');\n\n      this._dateInput.element.setAttribute('aria-expanded', \"\" + this.show);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  TimePicker.prototype.componentWillUnmount = function () {\n    clearTimeout(this.nextTickId);\n  };\n  /**\n   * @hidden\n   */\n\n\n  TimePicker.prototype.componentDidUpdate = function (prevProps) {\n    if (this._dateInput && this._dateInput.element) {\n      this._dateInput.element.setAttribute('aria-expanded', \"\" + this.show);\n    }\n\n    if (this._timeSelector && this.show && !prevProps.show) {\n      this._timeSelector.focusActiveList();\n    } else if (this._dateInput && this._dateInput.element && !this.show && this.shouldFocusDateInput) {\n      this._dateInput.element.focus({\n        preventScroll: true\n      });\n    }\n\n    this.shouldFocusDateInput = false;\n  };\n  /**\n   * @hidden\n   */\n\n\n  TimePicker.prototype.focus = function () {\n    if (this._dateInput) {\n      this._dateInput.focus();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  TimePicker.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        tabIndex = _a.tabIndex,\n        title = _a.title,\n        id = _a.id,\n        className = _a.className,\n        format = _a.format,\n        formatPlaceholder = _a.formatPlaceholder,\n        smoothScroll = _a.smoothScroll,\n        width = _a.width,\n        name = _a.name,\n        steps = _a.steps,\n        cancelButton = _a.cancelButton,\n        nowButton = _a.nowButton,\n        validationMessage = _a.validationMessage,\n        required = _a.required,\n        validityStyles = _a.validityStyles;\n\n    var _b = this.popupSettings,\n        popupClass = _b.popupClass,\n        otherPopupSettings = __rest(_b, [\"popupClass\"]);\n\n    var isValid = !this.validityStyles || this.validity.valid;\n    var rootClassName = classNames('k-widget k-timepicker', {\n      'k-state-invalid': !isValid\n    }, className);\n    var wrapperClassNames = classNames('k-picker-wrap', {\n      'k-state-default': !disabled,\n      'k-state-disabled': disabled\n    });\n    var popupClassNames = classNames('k-group k-reset', popupClass);\n    var dateInputProps = {\n      disabled: disabled,\n      format: format,\n      formatPlaceholder: formatPlaceholder,\n      id: id,\n      max: this.normalizeTime(this.max),\n      min: this.normalizeTime(this.min),\n      name: name,\n      onChange: this.handleInputValueChange,\n      required: required,\n      steps: steps,\n      tabIndex: !this.show ? tabIndex : -1,\n      title: title,\n      valid: this.validity.valid,\n      validationMessage: validationMessage,\n      validityStyles: validityStyles,\n      value: this.value && this.normalizeTime(this.value)\n    };\n\n    var popupProps = __assign({\n      show: this.show,\n      animate: this._wrapper !== null,\n      anchor: this._wrapper || undefined,\n      className: popupClassNames,\n      id: this._popupId,\n      anchorAlign: {\n        horizontal: 'left',\n        vertical: 'bottom'\n      },\n      popupAlign: {\n        horizontal: 'left',\n        vertical: 'top'\n      }\n    }, otherPopupSettings);\n\n    var timeSelector = React.createElement(TimeSelector, {\n      ref: this.setTimeSelectorRef,\n      cancelButton: cancelButton,\n      disabled: disabled,\n      nowButton: nowButton,\n      format: format,\n      min: this.min,\n      max: this.max,\n      steps: steps,\n      smoothScroll: smoothScroll,\n      value: this.value,\n      onChange: this.handleValueChange,\n      onReject: this.handleValueReject\n    });\n    var localizationService = provideLocalizationService(this);\n    var toggleClockMessage = localizationService.toLanguageString(toggleClock, messages[toggleClock]);\n    var toggleTimeMessage = localizationService.toLanguageString(toggleTimeSelector, messages[toggleTimeSelector]);\n    return React.createElement(\"div\", {\n      ref: function ref(span) {\n        _this._element = span;\n      },\n      className: rootClassName,\n      onKeyDown: this.handleKeyDown,\n      style: {\n        width: width\n      },\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur\n    }, React.createElement(\"span\", {\n      ref: function ref(span) {\n        _this._wrapper = span;\n      },\n      className: wrapperClassNames\n    }, this.props.dateInput ? React.createElement(this.props.dateInput, __assign({}, dateInputProps)) : React.createElement(DateInput, __assign({\n      ref: this.setDateInputRef\n    }, dateInputProps)), React.createElement(\"span\", __assign({\n      role: \"button\",\n      onMouseDown: this.handleIconMouseDown,\n      onClick: this.handleIconClick,\n      title: toggleTimeMessage,\n      className: \"k-select\"\n    }, {\n      'aria-controls': this._popupId,\n      'aria-label': toggleClockMessage\n    }), React.createElement(\"span\", {\n      className: \"k-icon k-i-clock\"\n    }))), this.props.popup ? React.createElement(this.props.popup, __assign({}, popupProps), timeSelector) : React.createElement(Popup, __assign({}, popupProps), timeSelector));\n  };\n\n  TimePicker.prototype.normalizeTime = function (date) {\n    return setTime(MIDNIGHT_DATE, date);\n  };\n\n  TimePicker.prototype.setShow = function (show) {\n    if (this.show === show) {\n      return;\n    }\n\n    this.setState({\n      show: show\n    });\n  };\n\n  TimePicker.prototype.nextTick = function (f) {\n    // XXX: use setTimeout due to async focus/blur events in IE, and missing relatedTarget prop.\n    // XXX: https://github.com/facebook/react/issues/3751\n    clearTimeout(this.nextTickId);\n    this.nextTickId = setTimeout(function () {\n      return f();\n    });\n  };\n\n  TimePicker.prototype.mergeTime = function (value) {\n    return this.value && value ? setTime(this.value, value) : value;\n  };\n  /**\n   * @hidden\n   */\n\n\n  TimePicker.propTypes = {\n    className: PropTypes.string,\n    cancelButton: PropTypes.bool,\n    nowButton: PropTypes.bool,\n    defaultShow: PropTypes.bool,\n    defaultValue: PropTypes.instanceOf(Date),\n    disabled: PropTypes.bool,\n    format: PropTypes.string,\n    formatPlaceholder: PropTypes.oneOfType([PropTypes.oneOf(['wide', 'narrow', 'short', 'formatPattern']), PropTypes.shape({\n      year: PropTypes.string,\n      month: PropTypes.string,\n      day: PropTypes.string,\n      hour: PropTypes.string,\n      minute: PropTypes.string,\n      second: PropTypes.string\n    })]),\n    id: PropTypes.string,\n    min: PropTypes.instanceOf(Date),\n    max: PropTypes.instanceOf(Date),\n    name: PropTypes.string,\n    popupSettings: PropTypes.shape({\n      animate: PropTypes.bool,\n      appendTo: PropTypes.any,\n      popupClass: PropTypes.string\n    }),\n    show: PropTypes.bool,\n    steps: PropTypes.shape({\n      hour: PropTypes.number,\n      minute: PropTypes.number,\n      second: PropTypes.number\n    }),\n    smoothScroll: PropTypes.bool,\n    tabIndex: PropTypes.number,\n    title: PropTypes.string,\n    value: PropTypes.instanceOf(Date),\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    validationMessage: PropTypes.string,\n    required: PropTypes.bool,\n    validate: PropTypes.bool,\n    valid: PropTypes.bool\n  };\n  /**\n   * @hidden\n   */\n\n  TimePicker.defaultProps = {\n    defaultShow: false,\n    defaultValue: null,\n    disabled: false,\n    format: 't',\n    max: MAX_TIME,\n    min: MIN_TIME,\n    popupSettings: {},\n    title: '',\n    tabIndex: 0,\n    steps: {},\n    required: false,\n    validityStyles: true\n  };\n  return TimePicker;\n}(React.Component);\n\nexport { TimePicker };\nregisterForLocalization(TimePicker);","map":null,"metadata":{},"sourceType":"module"}