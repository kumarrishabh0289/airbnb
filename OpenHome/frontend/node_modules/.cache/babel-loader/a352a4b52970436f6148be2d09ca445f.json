{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, guid, Keys } from '@progress/kendo-react-common';\nimport { cloneDate, getDate, isEqualDate } from '@progress/kendo-date-math';\nimport { provideIntlService, registerForIntl } from '@progress/kendo-react-intl';\nimport { ViewList } from './ViewList';\nimport { Navigation } from './Navigation';\nimport { MIN_DATE, MAX_DATE } from '../../defaults';\nimport { CalendarViewEnum } from '../models';\nimport { getToday, dateInRange, isInRange, viewInRange } from '../../utils';\nimport { BusViewService, DOMService, ScrollSyncService, NavigationService } from '../services';\n\nvar virtualizationProp = function virtualizationProp(x) {\n  return x ? x.virtualization : null;\n};\n\nvar calculateValue = function calculateValue(min, max, stateValue, propValue) {\n  if (min === void 0) {\n    min = Calendar.defaultProps.min;\n  }\n\n  if (max === void 0) {\n    max = Calendar.defaultProps.max;\n  }\n\n  return propValue !== undefined ? propValue !== null && isInRange(propValue, min, max) ? propValue : null : stateValue !== null && isInRange(stateValue, min, max) ? stateValue : null;\n};\n\nvar Calendar =\n/** @class */\nfunction (_super) {\n  __extends(Calendar, _super);\n\n  function Calendar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.cellUID = guid();\n    _this.id = guid();\n    _this.isActive = false;\n    _this.didNavigationChange = false;\n\n    _this.shouldScroll = function () {\n      return _this.didNavigationChange;\n    };\n\n    _this.handleScroll = function (event) {\n      if (!_this.scrollSyncService) {\n        return;\n      }\n\n      _this.scrollSyncService.sync(virtualizationProp(_this.Navigation), virtualizationProp(_this.calendarViewList), event);\n    };\n\n    _this.handleNavigationChange = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.didNavigationChange = true;\n      var focusedDate = cloneDate(event.value);\n\n      _this.setState({\n        focusedDate: focusedDate\n      });\n    };\n\n    _this.handleViewChange = function (_a) {\n      var view = _a.view;\n\n      _this.scrollSyncService.configure(view);\n\n      _this.setState({\n        activeView: view\n      });\n    };\n\n    _this.handleDateChange = function (event) {\n      var value = cloneDate(event.value);\n      var focusedDate = cloneDate(event.value);\n\n      var canNavigateDown = _this.bus.canMoveDown(_this.state.activeView);\n\n      if (_this.props.disabled) {\n        return;\n      }\n\n      if (canNavigateDown) {\n        if (event.isTodayClick) {\n          _this.bus.moveToBottom(_this.state.activeView);\n        } else {\n          _this.bus.moveDown(_this.state.activeView, event.syntheticEvent);\n\n          _this.setState({\n            focusedDate: focusedDate\n          });\n\n          return;\n        }\n      }\n\n      _this.setState({\n        value: value,\n        focusedDate: focusedDate\n      });\n\n      _this.valueDuringOnChange = value;\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        var args = {\n          syntheticEvent: event.syntheticEvent,\n          nativeEvent: event.nativeEvent,\n          value: value,\n          target: _this\n        };\n        onChange.call(undefined, args);\n      }\n\n      _this.valueDuringOnChange = undefined;\n    };\n\n    _this.handleFocus = function (event) {\n      _this.isActive = true;\n\n      if (!_this.calendarViewList) {\n        return;\n      }\n\n      _this.calendarViewList.focusActiveDate();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus.call(undefined, event);\n      }\n    };\n\n    _this.handleBlur = function (event) {\n      _this.isActive = false;\n\n      if (!_this.calendarViewList) {\n        return;\n      }\n\n      _this.calendarViewList.blurActiveDate();\n\n      var onBlur = _this.props.onBlur;\n\n      if (onBlur) {\n        onBlur.call(undefined, event);\n      }\n    };\n\n    _this.handleKeyDown = function (event) {\n      var keyCode = event.keyCode;\n\n      if (keyCode === Keys.enter) {\n        if (_this.value !== null && isEqualDate(_this.focusedDate, _this.value)) {\n          var viewDate = dateInRange(_this.focusedDate, _this.min, _this.max);\n          virtualizationProp(_this.calendarViewList).scrollToIndex(_this.service.skip(viewDate, _this.min));\n        }\n\n        var args = {\n          syntheticEvent: event,\n          nativeEvent: event.nativeEvent,\n          value: _this.focusedDate,\n          target: _this\n        };\n\n        _this.handleDateChange.call(undefined, args);\n      } else {\n        var candidate = dateInRange(_this.navigation.move(_this.focusedDate, _this.navigation.action(event), _this.state.activeView, _this.service, event), _this.min, _this.max);\n\n        if (isEqualDate(_this.focusedDate, candidate)) {\n          return;\n        }\n\n        _this.setState({\n          focusedDate: candidate\n        });\n      }\n\n      event.preventDefault();\n    };\n\n    _this.handleMouseDown = function (event) {\n      event.preventDefault();\n    };\n\n    _this.handleClick = function (_) {\n      if (_this._element) {\n        _this._element.focus({\n          preventScroll: true\n        });\n      }\n    };\n\n    var value = calculateValue(_this.min, _this.max, _this.props.defaultValue || Calendar.defaultProps.defaultValue, _this.props.value);\n    _this.state = {\n      value: value,\n      activeView: viewInRange(CalendarViewEnum[props.defaultActiveView], _this.bottomView, _this.topView),\n      focusedDate: dateInRange(props.focusedDate || value || getToday(), _this.min, _this.max)\n    };\n    _this.dom = new DOMService();\n    _this.bus = new BusViewService(_this.handleViewChange);\n    _this.navigation = new NavigationService(_this.bus);\n    _this.oldValue = value;\n    return _this;\n  }\n\n  Object.defineProperty(Calendar.prototype, \"element\", {\n    /**\n     * Gets the wrapping element of the Calendar.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"value\", {\n    /**\n     * Gets the value of the Calendar.\n     */\n    get: function get() {\n      return this.valueDuringOnChange !== undefined ? this.valueDuringOnChange : this.props.value !== undefined ? this.props.value : this.state.value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"min\", {\n    get: function get() {\n      return getDate(this.props.min !== undefined ? this.props.min : Calendar.defaultProps.min);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"max\", {\n    get: function get() {\n      return getDate(this.props.max !== undefined ? this.props.max : Calendar.defaultProps.max);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"bottomView\", {\n    get: function get() {\n      return CalendarViewEnum[this.props.bottomView !== undefined ? this.props.bottomView : Calendar.defaultProps.bottomView];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"topView\", {\n    get: function get() {\n      return CalendarViewEnum[this.props.topView !== undefined ? this.props.topView : Calendar.defaultProps.topView];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  Calendar.prototype.componentDidMount = function () {\n    var _this = this; // Async calculation of height to avoid animation cancellation\n\n\n    Promise.resolve().then(function () {\n      if (!_this._element) {\n        return;\n      }\n\n      _this.dom.calculateHeights(_this._element);\n\n      _this.scrollSyncService = new ScrollSyncService(_this.dom);\n\n      _this.scrollSyncService.configure(_this.state.activeView);\n\n      _this.forceUpdate();\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  Calendar.prototype.componentDidUpdate = function (_, prevState) {\n    if (prevState.activeView !== this.state.activeView) {\n      this.scrollSyncService.configure(this.state.activeView);\n    }\n\n    if (this.calendarViewList) {\n      this.isActive ? this.calendarViewList.focusActiveDate() : this.calendarViewList.blurActiveDate();\n    }\n\n    this.didNavigationChange = false;\n    this.oldValue = this.value;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Calendar.prototype.focus = function () {\n    if (this._element) {\n      this._element.focus();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Calendar.prototype.render = function () {\n    var _this = this;\n\n    var didValueChange = this.value !== null && this.oldValue !== null ? !isEqualDate(this.value, this.oldValue) : this.value !== this.oldValue;\n    var activeView = viewInRange(this.state.activeView, CalendarViewEnum[this.props.bottomView !== undefined ? this.props.bottomView : Calendar.defaultProps.bottomView], CalendarViewEnum[this.props.topView !== undefined ? this.props.topView : Calendar.defaultProps.topView]);\n    var value = calculateValue(this.min, this.max, this.value, this.value);\n    var sanitizedValue = value ? getDate(value) : null;\n    this.focusedDate = getDate(dateInRange(didValueChange && value !== null ? value : this.state.focusedDate, this.min, this.max));\n    this.intl = provideIntlService(this);\n    this.bus.configure(this.bottomView, this.topView);\n    this.service = this.bus.service(activeView, this.intl);\n    var rootClassNames = classNames('k-widget k-calendar k-calendar-infinite', {\n      'k-state-disabled': this.props.disabled,\n      'k-week-number': this.props.weekNumber\n    }, this.props.className);\n    var aria = {\n      'aria-disabled': this.props.disabled,\n      'aria-activedescendant': this.cellUID + this.focusedDate.getTime()\n    };\n    var calendarBody = [this.props.navigation && React.createElement(Navigation, {\n      key: 0,\n      ref: function ref(el) {\n        _this.Navigation = el;\n      },\n      activeView: this.state.activeView,\n      focusedDate: this.focusedDate,\n      min: this.min,\n      max: this.max,\n      onChange: this.handleNavigationChange,\n      service: this.service,\n      dom: this.dom,\n      navigationItem: this.props.navigationItem\n    }), React.createElement(ViewList, {\n      key: 1,\n      ref: function ref(el) {\n        _this.calendarViewList = el;\n      },\n      activeView: this.state.activeView,\n      focusedDate: this.focusedDate,\n      min: this.min,\n      max: this.max,\n      bus: this.bus,\n      shouldScroll: this.shouldScroll,\n      service: this.service,\n      cell: this.props.cell,\n      weekCell: this.props.weekCell,\n      dom: this.dom,\n      smoothScroll: this.props.smoothScroll,\n      showWeekNumbers: this.props.weekNumber,\n      onChange: this.handleDateChange,\n      value: sanitizedValue,\n      cellUID: this.cellUID,\n      headerTitle: this.props.headerTitle\n    })];\n    return React.createElement(\"div\", __assign({}, aria, {\n      ref: function ref(el) {\n        _this._element = el;\n      },\n      className: rootClassNames,\n      id: this.props.id || this.id,\n      role: \"grid\",\n      tabIndex: !this.props.disabled ? this.props.tabIndex || 0 : undefined,\n      onScroll: this.handleScroll,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      onMouseDown: this.handleMouseDown,\n      onClick: this.handleClick\n    }), calendarBody);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Calendar.propTypes = {\n    className: PropTypes.string,\n    defaultActiveView: PropTypes.oneOf(['month', 'year', 'decade', 'century']),\n    defaultValue: PropTypes.instanceOf(Date),\n    disabled: PropTypes.bool,\n    focusedDate: PropTypes.instanceOf(Date),\n    id: PropTypes.string,\n    max: PropTypes.instanceOf(Date),\n    min: PropTypes.instanceOf(Date),\n    navigation: PropTypes.bool,\n    smoothScroll: PropTypes.bool,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    tabIndex: PropTypes.number,\n    value: PropTypes.instanceOf(Date),\n    weekNumber: PropTypes.bool,\n    topView: function topView(props, propName, componentName) {\n      var prop = props[propName];\n      var bottomView = props.bottomView;\n\n      if (prop && bottomView && CalendarViewEnum[prop] < CalendarViewEnum[bottomView]) {\n        return new Error(\"Invalid prop + \" + propName + \" suplied to \" + componentName + \".\\n                    \" + propName + \" can not be smaller than bottomView.\\n                    \");\n      }\n    },\n    bottomView: function bottomView(props, propName, componentName) {\n      var prop = props[propName];\n      var topView = props.topView;\n\n      if (prop && topView && CalendarViewEnum[prop] > CalendarViewEnum[topView]) {\n        return new Error(\"Invalid prop + \" + propName + \" suplied to \" + componentName + \".\\n                    \" + propName + \" can not be bigger than topView.\\n                    \");\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n\n  Calendar.defaultProps = {\n    disabled: false,\n    min: MIN_DATE,\n    max: MAX_DATE,\n    navigation: true,\n    defaultActiveView: 'month',\n    defaultValue: null,\n    smoothScroll: true,\n    topView: 'century',\n    bottomView: 'month'\n  };\n  return Calendar;\n}(React.Component);\n\nexport { Calendar };\nregisterForIntl(Calendar);","map":null,"metadata":{},"sourceType":"module"}