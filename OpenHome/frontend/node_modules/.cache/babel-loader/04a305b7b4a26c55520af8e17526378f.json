{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '@progress/kendo-react-common';\nimport util from './util';\nvar styles = util.styles;\n/**\n * @hidden\n */\n\nfunction iconElement(_a) {\n  var imageUrl = _a.imageUrl,\n      icon = _a.icon,\n      iconClass = _a.iconClass,\n      imageAlt = _a.imageAlt;\n\n  if (imageUrl) {\n    return React.createElement(\"img\", {\n      role: \"presentation\",\n      className: 'k-image',\n      alt: imageAlt,\n      src: imageUrl\n    });\n  } else if (icon) {\n    var iconClasses = classNames('k-icon', 'k-i-' + icon);\n    return React.createElement(\"span\", {\n      role: \"presentation\",\n      className: iconClasses\n    });\n  } else if (iconClass) {\n    return React.createElement(\"span\", {\n      role: \"presentation\",\n      className: iconClass\n    });\n  }\n\n  return null;\n}\n\nvar Button =\n/** @class */\nfunction (_super) {\n  __extends(Button, _super);\n\n  function Button(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._element = null;\n\n    _this.handleClick = function (event) {\n      _this.toggleIfApplicable();\n\n      if (_this.props.onClick) {\n        _this.props.onClick.call(undefined, event);\n      }\n    };\n\n    _this.state = {\n      active: _this.props.togglable === true && _this.props.selected === true\n    };\n    return _this;\n  }\n\n  Object.defineProperty(Button.prototype, \"element\", {\n    /**\n     * Gets the DOM element of the Button component.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"selected\", {\n    /**\n     * Returns `true` when the component is togglable and selected ([see example]({% slug toggleable_button %})).\n     * Otherwise, returns `false`.\n     */\n    get: function get() {\n      return this._activeTemp !== undefined ? this._activeTemp : this.state.active;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  Button.getDerivedStateFromProps = function (props, state) {\n    if (props.togglable && props.selected !== undefined && props.selected !== state.active) {\n      return {\n        active: props.selected\n      };\n    }\n\n    return null;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Button.prototype.render = function () {\n    var _this = this;\n\n    var _a;\n\n    var _b = this.props,\n        children = _b.children,\n        look = _b.look,\n        primary = _b.primary,\n        togglable = _b.togglable,\n        icon = _b.icon,\n        iconClass = _b.iconClass,\n        imageUrl = _b.imageUrl,\n        imageAlt = _b.imageAlt,\n        className = _b.className,\n        onClick = _b.onClick,\n        htmlAttributes = __rest(_b, [\"children\", \"look\", \"primary\", \"togglable\", \"icon\", \"iconClass\", \"imageUrl\", \"imageAlt\", \"className\", \"onClick\"]);\n\n    var hasIcon = icon !== undefined || iconClass !== undefined || imageUrl !== undefined;\n    var hasChildren = children !== undefined;\n    var buttonClasses = classNames([styles.button], (_a = {}, _a[styles[\"\" + look]] = look !== 'default', _a[styles.primary] = primary, _a[styles['state-disabled']] = this.props.disabled, _a[styles['state-active']] = this.state.active, _a[styles['button-icon']] = !hasChildren && hasIcon, _a[styles['button-icontext']] = hasChildren && hasIcon, _a), [styles[\"\" + this.props.dir]], className);\n    var buttonProps = {\n      className: buttonClasses,\n      onClick: this.handleClick,\n      // Accessibility properties\n      role: togglable ? 'checkbox' : undefined,\n      'aria-disabled': this.props.disabled || undefined,\n      'aria-checked': togglable ? this.state.active : undefined\n    };\n    var iconEl = iconElement({\n      icon: icon,\n      iconClass: iconClass,\n      imageUrl: imageUrl,\n      imageAlt: imageAlt\n    });\n    return React.createElement(\"button\", __assign({}, buttonProps, htmlAttributes, {\n      ref: function ref(button) {\n        return _this._element = button;\n      }\n    }), iconEl, children);\n  };\n\n  Button.prototype.toggleIfApplicable = function () {\n    var _this = this;\n\n    if (this.props.togglable && this.props.selected === undefined) {\n      var active = !this.state.active;\n      this._activeTemp = active;\n      this.setState({\n        active: active\n      }, function () {\n        return _this._activeTemp = undefined;\n      });\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Button.propTypes = {\n    children: PropTypes.node,\n    look: PropTypes.oneOf(['default', 'bare', 'flat', 'outline']),\n    primary: PropTypes.bool,\n    selected: PropTypes.bool,\n    togglable: PropTypes.bool,\n    icon: PropTypes.string,\n    iconClass: PropTypes.string,\n    imageUrl: PropTypes.string,\n    imageAlt: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n\n  Button.defaultProps = {\n    look: 'default',\n    primary: false,\n    togglable: false\n  };\n  return Button;\n}(React.Component);\n\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}