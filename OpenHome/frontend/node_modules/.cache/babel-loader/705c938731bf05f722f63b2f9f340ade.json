{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { weekInYear, cloneDate } from '@progress/kendo-date-math';\nimport { registerForIntl, provideIntlService } from '@progress/kendo-react-intl';\nimport { CalendarCell } from './CalendarCell';\nimport { CalendarWeekCell } from './CalendarWeekCell';\nimport { CalendarViewEnum } from '../models';\nimport { setTime, getToday } from '../../utils';\nimport { WeekNamesService } from '../services'; // tslint:disable-next-line jsx-use-translation-function\n\nvar emptyCell = function emptyCell(idx) {\n  return React.createElement(\"td\", {\n    key: idx\n  }, \"\\xA0\");\n};\n/**\n * @hidden\n */\n\n\nvar View =\n/** @class */\nfunction (_super) {\n  __extends(View, _super);\n\n  function View() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildWeekNumber = function (row, idx) {\n      var firstDayOfWeek = _this.firstDate(row);\n\n      if (!firstDayOfWeek) {\n        return emptyCell(\"week-cell-\" + idx);\n      }\n\n      var weekCellValue = _this.getWeekNumber(_this.firstDate(row));\n\n      var uniqueID = \"kendo-react-calendar-week-cell-\" + weekCellValue;\n      var cellProps = {\n        className: 'k-alt',\n        value: weekCellValue\n      };\n      return _this.props.weekCell ? React.createElement(_this.props.weekCell, __assign({}, cellProps, {\n        key: uniqueID\n      }), weekCellValue) : React.createElement(CalendarWeekCell, __assign({}, cellProps, {\n        key: uniqueID\n      }), weekCellValue);\n    };\n\n    _this.buildRow = function (row) {\n      return row.map(function (cell, idx) {\n        if (!cell) {\n          return emptyCell(idx);\n        }\n\n        var aria = {\n          'aria-selected': cell.isSelected\n        };\n        var uniqueID = \"kendo-react-calendar-cell-\" + cell.value.getTime();\n\n        var isDisabled = cell.value.getTime() < _this.props.min.getTime() || cell.value.getTime() > _this.props.max.getTime();\n\n        var cellProps = __assign({}, aria, cell, {\n          isDisabled: isDisabled,\n          view: _this.props.activeView,\n          onClick: _this.handleClick,\n          onMouseEnter: _this.handleMouseEnter,\n          onMouseLeave: _this.handleMouseLeave\n        });\n\n        return _this.props.cell ? React.createElement(_this.props.cell, __assign({}, cellProps, {\n          key: uniqueID\n        }), cell.formattedValue) : React.createElement(CalendarCell, __assign({}, cellProps, {\n          key: uniqueID\n        }), cell.formattedValue);\n      });\n    };\n\n    _this.firstDate = function (row) {\n      var cell = _this.firstWeekDateContext(row);\n\n      return cell ? cell.value : null;\n    };\n\n    _this.firstWeekDateContext = function (rowCtx) {\n      if (!_this.weekNumber) {\n        return null;\n      }\n\n      var idx = 0;\n      var ctx = rowCtx[idx];\n\n      while (!ctx && idx < rowCtx.length) {\n        ctx = rowCtx[++idx];\n      }\n\n      return ctx;\n    };\n\n    _this.handleClick = function (value, event) {\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        var args = {\n          value: cloneDate(value),\n          target: _this,\n          nativeEvent: event && event.nativeEvent,\n          syntheticEvent: event\n        };\n        onChange.call(undefined, args);\n      }\n    };\n\n    _this.handleMouseEnter = function (value) {\n      var onCellEnter = _this.props.onCellEnter;\n\n      if (onCellEnter) {\n        onCellEnter.call(undefined, cloneDate(value));\n      }\n    };\n\n    _this.handleMouseLeave = function (value) {\n      var onCellLeave = _this.props.onCellLeave;\n\n      if (onCellLeave) {\n        onCellLeave.call(undefined, cloneDate(value));\n      }\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(View.prototype, \"isHorizontal\", {\n    get: function get() {\n      return this.props.direction === 'horizontal';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(View.prototype, \"isMonthView\", {\n    get: function get() {\n      return this.props.activeView === CalendarViewEnum.month;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(View.prototype, \"weekNumber\", {\n    get: function get() {\n      return Boolean(this.props.showWeekNumbers && this.props.activeView === CalendarViewEnum.month);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(View.prototype, \"selectedDate\", {\n    get: function get() {\n      return this.props.selectedDate !== undefined ? this.props.selectedDate : View.defaultProps.selectedDate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  View.prototype.render = function () {\n    var _this = this;\n\n    this.intl = provideIntlService(this);\n    this.weekService = new WeekNamesService(this.intl);\n    var weekNames = this.weekService.getWeekNames(this.weekNumber);\n    var colSpan = this.props.service.rowLength(this.weekNumber);\n    var title = this.props.service.title(this.props.viewDate);\n    var time = getToday();\n    var viewDate = setTime(this.props.viewDate, time);\n    var data = this.props.service.data({\n      cellUID: this.props.cellUID,\n      focusedDate: this.props.focusedDate,\n      isActiveView: !this.props.bus.canMoveDown(this.props.activeView),\n      selectedDate: this.selectedDate,\n      selectionRange: this.props.selectionRange,\n      viewDate: viewDate\n    });\n    return React.createElement(\"tbody\", {\n      role: \"rowgroup\"\n    }, !this.isHorizontal && React.createElement(\"tr\", {\n      role: \"row\"\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      colSpan: colSpan\n    }, title)), this.isMonthView && this.isHorizontal && React.createElement(\"tr\", {\n      role: \"row\"\n    }, weekNames.map(function (name, idx) {\n      return React.createElement(\"th\", {\n        key: idx\n      }, name);\n    })), data.map(function (row, idx) {\n      return React.createElement(\"tr\", {\n        role: \"row\",\n        key: idx\n      }, _this.weekNumber && _this.buildWeekNumber(row, idx), _this.buildRow(row));\n    }));\n  };\n\n  View.prototype.getWeekNumber = function (date) {\n    if (!this.weekNumber) {\n      return null;\n    }\n\n    return weekInYear(date, this.intl.firstDay());\n  };\n\n  View.propTypes = {\n    activeRangeEnd: PropTypes.oneOf(['start', 'end', null]),\n    activeView: PropTypes.number.isRequired,\n    cellUID: PropTypes.string.isRequired,\n    direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    focusedDate: PropTypes.instanceOf(Date).isRequired,\n    max: PropTypes.instanceOf(Date).isRequired,\n    min: PropTypes.instanceOf(Date).isRequired,\n    onChange: PropTypes.func,\n    selectedDate: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date))]),\n    showWeekNumbers: PropTypes.bool,\n    viewDate: PropTypes.instanceOf(Date).isRequired\n  };\n  View.defaultProps = {\n    direction: 'vertical',\n    selectedDate: getToday(),\n    showWeekNumbers: false\n  };\n  return View;\n}(React.Component);\n\nexport { View };\nregisterForIntl(View);","map":null,"metadata":{},"sourceType":"module"}