{"ast":null,"code":"var _a;\n\nimport { CenturyViewService } from './CenturyViewService';\nimport { DecadeViewService } from './DecadeViewService';\nimport { MonthViewService } from './MonthViewService';\nimport { YearViewService } from './YearViewService';\nimport { CalendarViewEnum } from '../models/CalendarViewEnum';\nvar services = (_a = {}, _a[CalendarViewEnum.month] = MonthViewService, _a[CalendarViewEnum.year] = YearViewService, _a[CalendarViewEnum.decade] = DecadeViewService, _a[CalendarViewEnum.century] = CenturyViewService, _a);\n\nvar viewOffset = function viewOffset(view, offset) {\n  var candidate = CalendarViewEnum[CalendarViewEnum[view + offset]];\n  return candidate !== undefined ? candidate : view;\n};\n/**\n * @hidden\n */\n\n\nvar BusViewService =\n/** @class */\nfunction () {\n  function BusViewService(onViewChanged) {\n    this.bottom = CalendarViewEnum.month;\n    this.top = CalendarViewEnum.century;\n    this.onViewChanged = onViewChanged;\n  }\n\n  BusViewService.prototype.configure = function (bottom, top) {\n    this.bottom = bottom;\n    this.top = top;\n  };\n\n  BusViewService.prototype.service = function (view, intl) {\n    return new services[\"\" + view](intl);\n  };\n\n  BusViewService.prototype.moveDown = function (view, event) {\n    this.move(view, -1, event);\n  };\n\n  BusViewService.prototype.moveUp = function (view, event) {\n    this.move(view, 1, event);\n  };\n\n  BusViewService.prototype.moveToBottom = function (activeView) {\n    if (activeView === this.bottom) {\n      return;\n    }\n\n    this.onViewChanged({\n      view: this.bottom\n    });\n  };\n\n  BusViewService.prototype.canMoveDown = function (view) {\n    return this.bottom < view;\n  };\n\n  BusViewService.prototype.canMoveUp = function (view) {\n    return view < this.top;\n  };\n\n  BusViewService.prototype.clamp = function (view) {\n    if (view < this.bottom) {\n      return this.bottom;\n    }\n\n    if (view > this.top) {\n      return this.top;\n    }\n\n    return view;\n  };\n\n  BusViewService.prototype.move = function (view, offset, event) {\n    var candidate = this.clamp(viewOffset(view, offset));\n\n    if (candidate === view) {\n      return;\n    }\n\n    this.onViewChanged({\n      view: candidate\n    }, event);\n  };\n\n  return BusViewService;\n}();\n\nexport { BusViewService };","map":null,"metadata":{},"sourceType":"module"}