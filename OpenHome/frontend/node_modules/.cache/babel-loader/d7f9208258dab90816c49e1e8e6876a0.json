{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Animation } from './Animation';\nimport { noop } from '@progress/kendo-react-common';\nimport util from './util';\n\nvar Reveal =\n/** @class */\nfunction (_super) {\n  __extends(Reveal, _super);\n\n  function Reveal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {\n      maxHeight: undefined,\n      maxWidth: undefined\n    };\n\n    _this.componentWillEnter = function (event) {\n      var onEnter = _this.props.onEnter;\n\n      _this.updateContainerDimensions(event.animatedElement, function () {\n        if (onEnter) {\n          onEnter.call(undefined, event);\n        }\n      });\n    };\n\n    _this.componentIsEntering = function (event) {\n      var onEntering = _this.props.onEntering;\n\n      _this.updateContainerDimensions(event.animatedElement, function () {\n        if (onEntering) {\n          onEntering.call(undefined, event);\n        }\n      });\n    };\n\n    _this.componentWillExit = function (event) {\n      var onExit = _this.props.onExit;\n\n      _this.updateContainerDimensions(event.animatedElement, function () {\n        if (onExit) {\n          onExit.call(undefined, event);\n        }\n      });\n    };\n\n    _this.updateContainerDimensions = function (node, done) {\n      if (done === void 0) {\n        done = noop;\n      }\n\n      var content = node.firstChild;\n\n      if (content) {\n        var newHeight = util.outerHeight(content);\n        var newWidth = util.outerWidth(content);\n\n        _this.setState({\n          maxHeight: newHeight,\n          maxWidth: newWidth\n        }, done);\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  Reveal.prototype.render = function () {\n    var _a = this.props,\n        direction = _a.direction,\n        children = _a.children,\n        childFactory = _a.childFactory,\n        other = __rest(_a, [\"direction\", \"children\", \"childFactory\"]);\n\n    var _b = this.state,\n        maxHeight = _b.maxHeight,\n        maxWidth = _b.maxWidth;\n    var maxOffset;\n\n    if (direction === 'vertical') {\n      maxOffset = {\n        maxHeight: maxHeight ? maxHeight + \"px\" : null\n      };\n    } else {\n      maxOffset = {\n        maxWidth: maxWidth ? maxWidth + \"px\" : null\n      };\n    }\n\n    var animationEnteringStyle = {\n      maxHeight: maxOffset.maxHeight,\n      maxWidth: maxOffset.maxWidth\n    };\n\n    var factory = function factory(child) {\n      if (!child.props.in) {\n        return React.cloneElement(child, __assign({}, child.props, {\n          style: __assign({}, child.props.style, {\n            maxHeight: maxOffset.maxHeight,\n            maxWidth: maxOffset.maxWidth\n          })\n        }));\n      }\n\n      return child;\n    };\n\n    return React.createElement(Animation, __assign({}, other, {\n      childFactory: childFactory ? childFactory : factory,\n      onEnter: this.componentWillEnter,\n      onEntering: this.componentIsEntering,\n      onExit: this.componentWillExit,\n      animationEnteringStyle: animationEnteringStyle,\n      transitionName: \"reveal-\" + direction\n    }), children);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Reveal.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n    childFactory: PropTypes.any,\n    className: PropTypes.string,\n    direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    component: PropTypes.string,\n    id: PropTypes.string,\n    style: PropTypes.any\n  };\n  /**\n   * @hidden\n   */\n\n  Reveal.defaultProps = {\n    appear: false,\n    enter: true,\n    exit: true,\n    transitionEnterDuration: 300,\n    transitionExitDuration: 300,\n    direction: 'vertical'\n  };\n  return Reveal;\n}(React.Component);\n\nexport { Reveal };","map":null,"metadata":{},"sourceType":"module"}