{"ast":null,"code":"import { createElement, PureComponent, Component } from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar classnames = createCommonjsModule(function (module) {\n  /*!\n    Copyright (c) 2017 Jed Watson.\n    Licensed under the MIT License (MIT), see\n    http://jedwatson.github.io/classnames\n  */\n\n  /* global define */\n  (function () {\n    var hasOwn = {}.hasOwnProperty;\n\n    function classNames() {\n      var classes = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (!arg) continue;\n        var argType = typeof arg;\n\n        if (argType === 'string' || argType === 'number') {\n          classes.push(arg);\n        } else if (Array.isArray(arg) && arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        } else if (argType === 'object') {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        }\n      }\n\n      return classes.join(' ');\n    }\n\n    if (module.exports) {\n      classNames.default = classNames;\n      module.exports = classNames;\n    } else {\n      window.classNames = classNames;\n    }\n  })();\n});\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\n\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/** Used as references for various `Number` constants. */\n\nvar NAN = 0 / 0;\n/** `Object#toString` result references. */\n\nvar symbolTag = '[object Symbol]';\n/** Used to match leading and trailing whitespace. */\n\nvar reTrim = /^\\s+|\\s+$/g;\n/** Used to detect bad signed hexadecimal string values. */\n\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */\n\nvar reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */\n\nvar reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */\n\nvar freeParseInt = parseInt;\n/** Detect free variable `global` from Node.js. */\n\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n/** Detect free variable `self`. */\n\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root = freeGlobal || freeSelf || Function('return this')();\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\n\nvar now = function now() {\n  return root.Date.now();\n};\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\n\n\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  wait = toNumber(wait) || 0;\n\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time; // Start the timer for the trailing edge.\n\n    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.\n\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n\n    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n  }\n\n  function timerExpired() {\n    var time = now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    } // Restart the timer.\n\n\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n\n    return result;\n  }\n\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\n\n\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\n\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\n\nfunction isSymbol(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\n\n\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n\n  if (isSymbol(value)) {\n    return NAN;\n  }\n\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? other + '' : other;\n  }\n\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nvar lodash_debounce = debounce;\n/* istanbul ignore next */\n\n/* tslint:disable:no-empty */\n\n/**\r\n * Default values\r\n */\n\nvar defaults = {\n  autoActivateFirstSuggest: false,\n  disabled: false,\n  fixtures: [],\n  getSuggestLabel: function getSuggestLabel(suggest) {\n    return suggest.description;\n  },\n  highlightMatch: true,\n  ignoreEnter: false,\n  ignoreTab: false,\n  initialValue: '',\n  maxFixtures: 10,\n  minLength: 1,\n  onKeyDown: function onKeyDown() {},\n  onKeyPress: function onKeyPress() {},\n  placeholder: 'Search places',\n  queryDelay: 250,\n  skipSuggest: function skipSuggest() {\n    return false;\n  },\n  style: {}\n};\n/**\r\n * Attributes allowed on input elements\r\n */\n\nvar allowedAttributes = ['autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFocus', 'disabled', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'height', 'id', 'inputMode', 'maxLength', 'name', 'onClick', 'onContextMenu', 'onCopy', 'onCut', 'onDoubleClick', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onPaste', 'pattern', 'placeholder', 'readOnly', 'required', 'size', 'spellCheck', 'tabIndex', 'title', 'aria-atomic', 'aria-busy', 'aria-controls', 'aria-current', 'aria-describedby', 'aria-details', 'aria-disabled', 'aria-dropeffect', 'aria-errormessage', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-keyshortcuts', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant', 'aria-roledescription', 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-placeholder', 'aria-readonly', 'aria-required'];\n/**\r\n * Filter the properties for only allowed input properties\r\n */\n\nfunction filterInputAttributes(props) {\n  var attributes = {};\n  allowedAttributes.forEach(function (allowedAttribute) {\n    if (props[allowedAttribute]) {\n      attributes[allowedAttribute] = props[allowedAttribute];\n    }\n  });\n  return attributes;\n}\n/**\r\n * The input field\r\n */\n\n\nvar default_1 =\n/** @class */\nfunction (_super) {\n  __extends(default_1, _super);\n  /**\r\n   * The constructor.\r\n   */\n\n\n  function default_1(props) {\n    var _this = _super.call(this, props) || this;\n    /* tslint:enable:no-empty */\n\n    /**\r\n     * The reference to the input element\r\n     */\n\n\n    _this.input = null;\n    _this.onChange = _this.onChange.bind(_this);\n    _this.onInputKeyDown = _this.onInputKeyDown.bind(_this);\n    return _this;\n  }\n  /**\r\n   * When the input got changed\r\n   */\n\n\n  default_1.prototype.onChange = function () {\n    if (this.input) {\n      this.props.onChange(this.input.value);\n    }\n  };\n  /**\r\n   * When a key gets pressed in the input\r\n   */\n\n\n  default_1.prototype.onInputKeyDown = function (event) {\n    // Call props.onKeyDown if defined\n    // Gives the developer a little bit more control if needed\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(event);\n    }\n\n    switch (event.which) {\n      case 40:\n        // DOWN\n        if (!event.shiftKey) {\n          event.preventDefault();\n          this.props.onNext();\n        }\n\n        break;\n\n      case 38:\n        // UP\n        if (!event.shiftKey) {\n          event.preventDefault();\n          this.props.onPrev();\n        }\n\n        break;\n\n      case 13:\n        // ENTER\n        if (this.props.doNotSubmitOnEnter) {\n          event.preventDefault();\n        }\n\n        if (!this.props.ignoreEnter) {\n          this.props.onSelect();\n        }\n\n        break;\n\n      case 9:\n        // TAB\n        if (!this.props.ignoreTab) {\n          this.props.onSelect();\n        }\n\n        break;\n\n      case 27:\n        // ESC\n        this.props.onEscape();\n        break;\n\n      /* istanbul ignore next */\n\n      default:\n        break;\n    }\n  };\n  /**\r\n   * Focus the input\r\n   */\n\n\n  default_1.prototype.focus = function () {\n    if (this.input) {\n      this.input.focus();\n    }\n  };\n  /**\r\n   * Blur the input\r\n   */\n\n\n  default_1.prototype.blur = function () {\n    if (this.input) {\n      this.input.blur();\n    }\n  };\n  /**\r\n   * Render the view\r\n   */\n\n\n  default_1.prototype.render = function () {\n    var _this = this;\n\n    var attributes = filterInputAttributes(this.props);\n    var classes = classnames('geosuggest__input', this.props.className);\n    return createElement(\"input\", _assign({\n      className: classes,\n      ref: function ref(i) {\n        return _this.input = i;\n      },\n      type: \"text\"\n    }, attributes, {\n      value: this.props.value,\n      style: this.props.style,\n      onKeyDown: this.onInputKeyDown,\n      onChange: this.onChange,\n      onKeyPress: this.props.onKeyPress,\n      onFocus: this.props.onFocus,\n      onBlur: this.props.onBlur,\n      role: \"combobox\",\n      \"aria-expanded\": !this.props.isSuggestsHidden,\n      \"aria-activedescendant\": this.props.activeSuggest ? this.props.activeSuggest.placeId : undefined,\n      \"aria-owns\": this.props.listId\n    }));\n  };\n  /* tslint:disable:no-empty */\n\n  /**\r\n   * Default values for the properties\r\n   */\n\n\n  default_1.defaultProps = {\n    activeSuggest: null,\n    autoComplete: 'nope',\n    className: '',\n    isSuggestsHidden: true,\n    listId: '',\n    onBlur: function onBlur() {},\n    onChange: function onChange() {},\n    onEscape: function onEscape() {},\n    onFocus: function onFocus() {},\n    onKeyDown: function onKeyDown() {},\n    onKeyPress: function onKeyPress() {},\n    onNext: function onNext() {},\n    onPrev: function onPrev() {},\n    onSelect: function onSelect() {},\n    value: ''\n  };\n  return default_1;\n}(PureComponent);\n/**\r\n * A single Geosuggest item in the list\r\n */\n\n\nvar default_1$1 =\n/** @class */\nfunction (_super) {\n  __extends(default_1, _super);\n  /**\r\n   * The constructor.\r\n   */\n\n\n  function default_1(props) {\n    var _this = _super.call(this, props) || this;\n    /**\r\n     * The reference to the suggest element\r\n     */\n\n\n    _this.ref = null;\n    _this.onClick = _this.onClick.bind(_this);\n    return _this;\n  }\n  /**\r\n   * Makes a text bold\r\n   */\n\n\n  default_1.prototype.makeBold = function (element, key) {\n    return createElement(\"b\", {\n      className: \"geosuggest__item__matched-text\",\n      key: key\n    }, element);\n  };\n  /**\r\n   * Replace matched text with the same in bold\r\n   */\n\n\n  default_1.prototype.formatMatchedText = function (userInput, suggest) {\n    if (!userInput || !suggest.matchedSubstrings) {\n      return suggest.label;\n    }\n\n    var start = suggest.matchedSubstrings.offset;\n    var length = suggest.matchedSubstrings.length;\n    var end = start + length;\n    var boldPart = this.makeBold(suggest.label.substring(start, end), suggest.label);\n    var pre = '';\n    var post = '';\n\n    if (start > 0) {\n      pre = suggest.label.slice(0, start);\n    }\n\n    if (end < suggest.label.length) {\n      post = suggest.label.slice(end);\n    }\n\n    return createElement(\"span\", null, pre, boldPart, post);\n  };\n  /**\r\n   * Checking if item just became active and scrolling if needed.\r\n   */\n\n\n  default_1.prototype.componentDidUpdate = function (prevProps) {\n    if (!prevProps.isActive && this.props.isActive) {\n      this.scrollIfNeeded();\n    }\n  };\n  /**\r\n   * Scrolling current item to the center of the list if item needs scrolling.\r\n   * Item is scrolled to the center of the list.\r\n   */\n\n\n  default_1.prototype.scrollIfNeeded = function () {\n    var element = this.ref;\n    var parent = element && element.parentElement;\n\n    if (!element || !parent) {\n      return;\n    }\n\n    var overTop = element.offsetTop - parent.offsetTop < parent.scrollTop;\n    var overBottom = element.offsetTop - parent.offsetTop + element.clientHeight > parent.scrollTop + parent.clientHeight;\n\n    if (overTop || overBottom) {\n      parent.scrollTop = element.offsetTop - parent.offsetTop - parent.clientHeight / 2 + element.clientHeight / 2;\n    }\n  };\n  /**\r\n   * When the suggest item got clicked\r\n   */\n\n\n  default_1.prototype.onClick = function (event) {\n    event.preventDefault();\n    this.props.onSelect(this.props.suggest);\n  };\n  /**\r\n   * Render the view\r\n   */\n\n\n  default_1.prototype.render = function () {\n    var _this = this;\n\n    var _a;\n\n    var suggest = this.props.suggest;\n    var classes = classnames('geosuggest__item', this.props.className, this.props.suggestItemClassName, {\n      'geosuggest__item--active': this.props.isActive\n    }, (_a = {}, _a[this.props.activeClassName || ''] = this.props.activeClassName ? this.props.isActive : null, _a));\n    var content = suggest.label;\n\n    if (this.props.renderSuggestItem) {\n      content = this.props.renderSuggestItem(suggest, this.props.userInput);\n    } else if (this.props.isHighlightMatch) {\n      content = this.formatMatchedText(this.props.userInput, suggest);\n    }\n\n    return createElement(\"li\", {\n      className: classes,\n      ref: function ref(li) {\n        return _this.ref = li;\n      },\n      style: this.props.style,\n      onMouseDown: this.props.onMouseDown,\n      onMouseOut: this.props.onMouseOut,\n      onClick: this.onClick,\n      role: \"option\",\n      \"aria-selected\": this.props.isActive,\n      id: suggest.placeId\n    }, content);\n  };\n\n  return default_1;\n}(PureComponent);\n/**\r\n * The list with suggestions.\r\n */\n\n\nvar default_1$2 =\n/** @class */\nfunction (_super) {\n  __extends(default_1, _super);\n\n  function default_1() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Whether or not it is hidden\r\n   */\n\n\n  default_1.prototype.isHidden = function () {\n    return this.props.isHidden || this.props.suggests.length === 0;\n  };\n  /**\r\n   * There are new properties available for the list\r\n   */\n\n\n  default_1.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.suggests !== this.props.suggests) {\n      if (this.props.suggests.length === 0) {\n        this.props.onSuggestNoResults();\n      }\n    }\n  };\n  /**\r\n   * Render the view\r\n   * @return {Function} The React element to render\r\n   */\n\n\n  default_1.prototype.render = function () {\n    var _this = this;\n\n    var _a;\n\n    var classes = classnames('geosuggest__suggests', this.props.suggestsClassName, {\n      'geosuggest__suggests--hidden': this.isHidden()\n    }, (_a = {}, _a[this.props.hiddenClassName || ''] = this.props.hiddenClassName ? this.isHidden() : null, _a));\n    return createElement(\"ul\", {\n      className: classes,\n      style: this.props.style,\n      role: \"listbox\",\n      id: this.props.listId\n    }, this.props.suggests.map(function (suggest) {\n      var isActive = _this.props.activeSuggest && suggest.placeId === _this.props.activeSuggest.placeId || false;\n      return createElement(default_1$1, {\n        key: suggest.placeId,\n        className: suggest.className || '',\n        userInput: _this.props.userInput,\n        isHighlightMatch: _this.props.isHighlightMatch,\n        suggest: suggest,\n        style: _this.props.suggestItemStyle,\n        suggestItemClassName: _this.props.suggestItemClassName,\n        isActive: isActive,\n        activeClassName: _this.props.suggestItemActiveClassName,\n        onMouseDown: _this.props.onSuggestMouseDown,\n        onMouseOut: _this.props.onSuggestMouseOut,\n        onSelect: _this.props.onSuggestSelect,\n        renderSuggestItem: _this.props.renderSuggestItem\n      });\n    }));\n  };\n\n  return default_1;\n}(PureComponent);\n/* global window */\n// Escapes special characters in user input for regex\n\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n}\n/**\r\n * Entry point for the Geosuggest component\r\n */\n\n\nvar default_1$3 =\n/** @class */\nfunction (_super) {\n  __extends(default_1$1, _super);\n  /**\r\n   * The constructor. Sets the initial state.\r\n   */\n\n\n  function default_1$1(props) {\n    var _this = _super.call(this, props) || this;\n    /**\r\n     * The Google Map instance\r\n     */\n\n\n    _this.googleMaps = null;\n    /**\r\n     * The autocomple service to get suggests\r\n     */\n\n    _this.autocompleteService = null;\n    /**\r\n     * The places service to get place details\r\n     */\n\n    _this.placesService = null;\n    /**\r\n     * The sessionToken service to use session based monetization\r\n     */\n\n    _this.sessionToken = undefined;\n    /**\r\n     * The geocoder to get geocoded results\r\n     */\n\n    _this.geocoder = null;\n    /**\r\n     * The input component\r\n     */\n\n    _this.input = null;\n    _this.state = {\n      activeSuggest: null,\n      ignoreBlur: false,\n      isLoading: false,\n      isSuggestsHidden: true,\n      suggests: [],\n      userInput: props.initialValue || ''\n    };\n    _this.onInputChange = _this.onInputChange.bind(_this);\n    _this.onAfterInputChange = _this.onAfterInputChange.bind(_this);\n    _this.onInputFocus = _this.onInputFocus.bind(_this);\n    _this.onInputBlur = _this.onInputBlur.bind(_this);\n    _this.onNext = _this.onNext.bind(_this);\n    _this.onPrev = _this.onPrev.bind(_this);\n    _this.onSelect = _this.onSelect.bind(_this);\n    _this.onSuggestMouseDown = _this.onSuggestMouseDown.bind(_this);\n    _this.onSuggestMouseOut = _this.onSuggestMouseOut.bind(_this);\n    _this.onSuggestNoResults = _this.onSuggestNoResults.bind(_this);\n    _this.hideSuggests = _this.hideSuggests.bind(_this);\n    _this.selectSuggest = _this.selectSuggest.bind(_this);\n    _this.listId = \"geosuggest__list_\" + Math.random().toString(16).slice(2);\n\n    if (props.queryDelay) {\n      _this.onAfterInputChange = lodash_debounce(_this.onAfterInputChange, props.queryDelay);\n    }\n\n    return _this;\n  }\n  /**\r\n   * Change inputValue if prop changes\r\n   */\n\n\n  default_1$1.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.initialValue !== this.props.initialValue) {\n      this.setState({\n        userInput: this.props.initialValue || ''\n      });\n    }\n  };\n  /**\r\n   * Called on the client side after component is mounted.\r\n   * Google api sdk object will be obtained and cached as a instance property.\r\n   * Necessary objects of google api will also be determined and saved.\r\n   */\n\n\n  default_1$1.prototype.componentDidMount = function () {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    var googleMaps = this.props.googleMaps || window.google && window.google.maps || this.googleMaps;\n    /* istanbul ignore next */\n\n    if (!googleMaps) {\n      if (console) {\n        // tslint:disable-next-line:no-console\n        console.error('Google maps API was not found in the page.');\n      }\n\n      return;\n    }\n\n    this.googleMaps = googleMaps;\n    this.autocompleteService = new googleMaps.places.AutocompleteService();\n    this.placesService = new googleMaps.places.PlacesService(document.createElement('div'));\n    this.sessionToken = new googleMaps.places.AutocompleteSessionToken();\n    this.geocoder = new googleMaps.Geocoder();\n  };\n  /**\r\n   * When the component will unmount\r\n   */\n\n\n  default_1$1.prototype.componentWillUnmount = function () {\n    clearTimeout(this.timer);\n  };\n  /**\r\n   * When the input changed\r\n   */\n\n\n  default_1$1.prototype.onInputChange = function (userInput) {\n    if (!userInput) {\n      if (this.props.onSuggestSelect) {\n        this.props.onSuggestSelect();\n      }\n    }\n\n    this.setState({\n      userInput: userInput\n    }, this.onAfterInputChange);\n  };\n  /**\r\n   * On After the input got changed\r\n   */\n\n\n  default_1$1.prototype.onAfterInputChange = function () {\n    this.showSuggests();\n\n    if (this.props.onChange) {\n      this.props.onChange(this.state.userInput);\n    }\n  };\n  /**\r\n   * When the input gets focused\r\n   */\n\n\n  default_1$1.prototype.onInputFocus = function () {\n    if (this.props.onFocus) {\n      this.props.onFocus();\n    }\n\n    this.showSuggests();\n  };\n  /**\r\n   * When the input gets blurred\r\n   */\n\n\n  default_1$1.prototype.onInputBlur = function () {\n    if (!this.state.ignoreBlur) {\n      this.hideSuggests();\n    }\n  };\n\n  default_1$1.prototype.onNext = function () {\n    this.activateSuggest('next');\n  };\n\n  default_1$1.prototype.onPrev = function () {\n    this.activateSuggest('prev');\n  };\n\n  default_1$1.prototype.onSelect = function () {\n    this.selectSuggest(this.state.activeSuggest);\n  };\n\n  default_1$1.prototype.onSuggestMouseDown = function () {\n    this.setState({\n      ignoreBlur: true\n    });\n  };\n\n  default_1$1.prototype.onSuggestMouseOut = function () {\n    this.setState({\n      ignoreBlur: false\n    });\n  };\n\n  default_1$1.prototype.onSuggestNoResults = function () {\n    if (this.props.onSuggestNoResults) {\n      this.props.onSuggestNoResults(this.state.userInput);\n    }\n  };\n  /**\r\n   * Focus the input\r\n   */\n\n\n  default_1$1.prototype.focus = function () {\n    if (this.input) {\n      this.input.focus();\n    }\n  };\n  /**\r\n   * Blur the input\r\n   */\n\n\n  default_1$1.prototype.blur = function () {\n    if (this.input) {\n      this.input.blur();\n    }\n  };\n  /**\r\n   * Update the value of the user input\r\n   */\n\n\n  default_1$1.prototype.update = function (userInput) {\n    this.setState({\n      userInput: userInput\n    });\n\n    if (this.props.onChange) {\n      this.props.onChange(userInput);\n    }\n  };\n  /*\r\n   * Clear the input and close the suggestion pane\r\n   */\n\n\n  default_1$1.prototype.clear = function () {\n    this.setState({\n      userInput: ''\n    }, this.hideSuggests);\n  };\n  /**\r\n   * Search for new suggests\r\n   */\n\n\n  default_1$1.prototype.searchSuggests = function () {\n    var _this = this;\n\n    if (!this.state.userInput) {\n      this.updateSuggests();\n      return;\n    }\n\n    var options = {\n      input: this.state.userInput,\n      sessionToken: this.sessionToken\n    };\n    var inputLength = this.state.userInput.length;\n    var isShorterThanMinLength = this.props.minLength && inputLength < this.props.minLength;\n\n    if (isShorterThanMinLength) {\n      return;\n    }\n\n    var _a = this.props,\n        location = _a.location,\n        radius = _a.radius,\n        bounds = _a.bounds,\n        types = _a.types,\n        country = _a.country;\n    /* tslint:disable:curly */\n\n    if (location) options.location = location;\n    if (radius) options.radius = Number(this.props.radius);\n    if (bounds) options.bounds = bounds;\n    if (types) options.types = types;\n    if (country) options.componentRestrictions = {\n      country: country\n    };\n    /* tslint:enable:curly */\n\n    this.setState({\n      isLoading: true\n    }, function () {\n      if (!_this.autocompleteService) {\n        _this.setState({\n          isLoading: false\n        });\n\n        return;\n      }\n\n      _this.autocompleteService.getPlacePredictions(options, function (suggestsGoogle) {\n        _this.setState({\n          isLoading: false\n        });\n\n        _this.updateSuggests(suggestsGoogle || [], // can be null\n        function () {\n          if (_this.props.autoActivateFirstSuggest && !_this.state.activeSuggest) {\n            _this.activateSuggest('next');\n          }\n        });\n      });\n    });\n  };\n  /**\r\n   * Update the suggests\r\n   */\n\n\n  default_1$1.prototype.updateSuggests = function (suggestsGoogle, // tslint:disable-next-line:no-empty\n  callback) {\n    var _this = this;\n\n    if (suggestsGoogle === void 0) {\n      suggestsGoogle = [];\n    }\n\n    if (callback === void 0) {\n      callback = function callback() {};\n    }\n\n    var suggests = [];\n    var userInput = this.state.userInput;\n    var _a = this.props,\n        skipSuggest = _a.skipSuggest,\n        maxFixtures = _a.maxFixtures,\n        fixtures = _a.fixtures;\n    var regex = new RegExp(escapeRegExp(userInput), 'gim');\n    var fixturesSearched = 0;\n    var activeSuggest = null;\n\n    if (fixtures) {\n      fixtures.forEach(function (fixture) {\n        if (maxFixtures && fixturesSearched >= maxFixtures) {\n          return;\n        }\n\n        if (skipSuggest && !skipSuggest(fixture) && fixture.label.match(regex)) {\n          fixturesSearched++;\n          suggests.push(_assign({}, fixture, {\n            isFixture: true,\n            matchedSubstrings: {\n              length: userInput.length,\n              offset: fixture.label.indexOf(userInput)\n            },\n            placeId: fixture.placeId || fixture.label\n          }));\n        }\n      });\n    }\n\n    suggestsGoogle.forEach(function (suggest) {\n      if (skipSuggest && !skipSuggest(suggest)) {\n        suggests.push({\n          description: suggest.description,\n          isFixture: false,\n          label: _this.props.getSuggestLabel ? _this.props.getSuggestLabel(suggest) : '',\n          matchedSubstrings: suggest.matched_substrings[0],\n          placeId: suggest.place_id\n        });\n      }\n    });\n    activeSuggest = this.updateActiveSuggest(suggests);\n\n    if (this.props.onUpdateSuggests) {\n      this.props.onUpdateSuggests(suggests, activeSuggest);\n    }\n\n    this.setState({\n      suggests: suggests,\n      activeSuggest: activeSuggest\n    }, callback);\n  };\n  /**\r\n   * Return the new activeSuggest object after suggests have been updated\r\n   */\n\n\n  default_1$1.prototype.updateActiveSuggest = function (suggests) {\n    if (suggests === void 0) {\n      suggests = [];\n    }\n\n    var activeSuggest = this.state.activeSuggest;\n\n    if (activeSuggest) {\n      var newSuggest = suggests.filter(function (listedSuggest) {\n        return activeSuggest && activeSuggest.placeId === listedSuggest.placeId && activeSuggest.isFixture === listedSuggest.isFixture;\n      })[0];\n      activeSuggest = newSuggest || null;\n    }\n\n    return activeSuggest;\n  };\n  /**\r\n   * Show the suggestions\r\n   */\n\n\n  default_1$1.prototype.showSuggests = function () {\n    this.searchSuggests();\n    this.setState({\n      isSuggestsHidden: false\n    });\n  };\n  /**\r\n   * Hide the suggestions\r\n   */\n\n\n  default_1$1.prototype.hideSuggests = function () {\n    var _this = this;\n\n    if (this.props.onBlur) {\n      this.props.onBlur(this.state.userInput);\n    }\n\n    this.timer = window.setTimeout(function () {\n      _this.setState({\n        activeSuggest: null,\n        isSuggestsHidden: true\n      });\n    }, 100);\n  };\n  /**\r\n   * Activate a new suggest\r\n   */\n\n\n  default_1$1.prototype.activateSuggest = function (direction) {\n    if (this.state.isSuggestsHidden) {\n      this.showSuggests();\n      return;\n    }\n\n    var suggestsCount = this.state.suggests.length - 1;\n    var next = direction === 'next';\n    var newActiveSuggest = null;\n    var newIndex = 0;\n    var i = 0;\n\n    for (i; i <= suggestsCount; i++) {\n      if (this.state.suggests[i] === this.state.activeSuggest) {\n        newIndex = next ? i + 1 : i - 1;\n      }\n    }\n\n    if (!this.state.activeSuggest) {\n      newIndex = next ? 0 : suggestsCount;\n    }\n\n    if (newIndex >= 0 && newIndex <= suggestsCount) {\n      newActiveSuggest = this.state.suggests[newIndex];\n    }\n\n    if (this.props.onActivateSuggest) {\n      this.props.onActivateSuggest(newActiveSuggest);\n    }\n\n    this.setState({\n      activeSuggest: newActiveSuggest\n    });\n  };\n  /**\r\n   * When an item got selected\r\n   */\n\n\n  default_1$1.prototype.selectSuggest = function (suggestToSelect) {\n    var suggest = suggestToSelect || {\n      isFixture: false,\n      label: this.state.userInput,\n      placeId: this.state.userInput\n    };\n\n    if (!suggestToSelect && this.props.autoActivateFirstSuggest && this.state.suggests.length > 0) {\n      suggest = this.state.suggests[0];\n    }\n\n    this.setState({\n      isSuggestsHidden: true,\n      userInput: typeof suggest.label !== 'object' ? suggest.label : suggest.description || ''\n    });\n\n    if (suggest.location) {\n      this.setState({\n        ignoreBlur: false\n      });\n\n      if (this.props.onSuggestSelect) {\n        this.props.onSuggestSelect(suggest);\n      }\n\n      return;\n    }\n\n    this.geocodeSuggest(suggest);\n  };\n  /**\r\n   * Geocode a suggest\r\n   */\n\n\n  default_1$1.prototype.geocodeSuggest = function (suggestToGeocode) {\n    var _this = this;\n\n    if (!this.geocoder) {\n      return;\n    }\n\n    if (suggestToGeocode.placeId && !suggestToGeocode.isFixture && this.placesService) {\n      var options = {\n        placeId: suggestToGeocode.placeId,\n        sessionToken: this.sessionToken\n      };\n\n      if (this.props.placeDetailFields) {\n        options.fields = ['geometry'].concat(this.props.placeDetailFields);\n      }\n\n      this.placesService.getDetails(options, function (results, status) {\n        if (status === _this.googleMaps.places.PlacesServiceStatus.OK) {\n          var gmaps = results;\n          var location_1 = gmaps.geometry && gmaps.geometry.location;\n\n          var suggest = _assign({}, suggestToGeocode, {\n            gmaps: gmaps,\n            location: {\n              lat: location_1.lat(),\n              lng: location_1.lng()\n            }\n          });\n\n          _this.sessionToken = new google.maps.places.AutocompleteSessionToken();\n\n          if (_this.props.onSuggestSelect) {\n            _this.props.onSuggestSelect(suggest);\n          }\n        }\n      });\n    } else {\n      var options = {\n        address: suggestToGeocode.label,\n        bounds: this.props.bounds,\n        componentRestrictions: this.props.country ? {\n          country: this.props.country\n        } : undefined,\n        location: this.props.location\n      };\n      this.geocoder.geocode(options, function (results, status) {\n        if (status === _this.googleMaps.GeocoderStatus.OK) {\n          var gmaps = results[0];\n          var location_2 = gmaps.geometry && gmaps.geometry.location;\n\n          var suggest = _assign({}, suggestToGeocode, {\n            gmaps: gmaps,\n            location: {\n              lat: location_2.lat(),\n              lng: location_2.lng()\n            }\n          });\n\n          if (_this.props.onSuggestSelect) {\n            _this.props.onSuggestSelect(suggest);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * Render the view\r\n   */\n\n\n  default_1$1.prototype.render = function () {\n    var _this = this;\n\n    var attributes = filterInputAttributes(this.props);\n    var classes = classnames('geosuggest', this.props.className, {\n      'geosuggest--loading': this.state.isLoading\n    });\n    var shouldRenderLabel = this.props.label && attributes.id;\n    var input = createElement(default_1, _assign({\n      className: this.props.inputClassName,\n      ref: function ref(i) {\n        return _this.input = i;\n      },\n      value: this.state.userInput,\n      doNotSubmitOnEnter: !this.state.isSuggestsHidden,\n      ignoreTab: this.props.ignoreTab,\n      ignoreEnter: this.props.ignoreEnter,\n      style: this.props.style && this.props.style.input,\n      onChange: this.onInputChange,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      onKeyDown: this.props.onKeyDown,\n      onKeyPress: this.props.onKeyPress,\n      onNext: this.onNext,\n      onPrev: this.onPrev,\n      onSelect: this.onSelect,\n      onEscape: this.hideSuggests,\n      isSuggestsHidden: this.state.isSuggestsHidden,\n      activeSuggest: this.state.activeSuggest,\n      listId: this.listId\n    }, attributes));\n    var suggestionsList = createElement(default_1$2, {\n      isHidden: this.state.isSuggestsHidden,\n      style: this.props.style && this.props.style.suggests,\n      suggestItemStyle: this.props.style && this.props.style.suggestItem,\n      userInput: this.state.userInput,\n      isHighlightMatch: Boolean(this.props.highlightMatch),\n      suggestsClassName: this.props.suggestsClassName,\n      suggestItemClassName: this.props.suggestItemClassName,\n      suggests: this.state.suggests,\n      hiddenClassName: this.props.suggestsHiddenClassName,\n      suggestItemActiveClassName: this.props.suggestItemActiveClassName,\n      activeSuggest: this.state.activeSuggest,\n      onSuggestNoResults: this.onSuggestNoResults,\n      onSuggestMouseDown: this.onSuggestMouseDown,\n      onSuggestMouseOut: this.onSuggestMouseOut,\n      onSuggestSelect: this.selectSuggest,\n      renderSuggestItem: this.props.renderSuggestItem,\n      listId: this.listId\n    });\n    return createElement(\"div\", {\n      className: classes\n    }, createElement(\"div\", {\n      className: \"geosuggest__input-wrapper\"\n    }, shouldRenderLabel && createElement(\"label\", {\n      className: \"geosuggest__label\",\n      htmlFor: attributes.id\n    }, this.props.label), input), createElement(\"div\", {\n      className: \"geosuggest__suggests-wrapper\"\n    }, suggestionsList));\n  };\n  /**\r\n   * Default values for the properties\r\n   */\n\n\n  default_1$1.defaultProps = defaults;\n  return default_1$1;\n}(Component);\n\nexport default default_1$3;","map":null,"metadata":{},"sourceType":"module"}