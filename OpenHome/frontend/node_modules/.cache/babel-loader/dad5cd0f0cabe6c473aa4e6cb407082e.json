{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Button } from './../main';\nimport { classNames, guid, Keys } from '@progress/kendo-react-common';\nimport { dispatchEvent } from '@progress/kendo-react-common';\nimport ButtonItem from './ButtonItem';\nimport SplitButtonItem from './SplitButtonItem';\nimport navigation from './utils/navigation';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { getAnchorAlign, getPopupAlign } from './utils/popup';\n/**\n * Represents the [KendoReact SplitButton component]({% slug overview_splitbutton %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    render() {\n *        return (\n *            <SplitButton text=\"Act\">\n *                <SplitButtonItem text=\"Item1\" />\n *                <SplitButtonItem text=\"Item2\" />\n *                <SplitButtonItem text=\"Item3\" />\n *            </SplitButton>\n *        );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar SplitButton =\n/** @class */\nfunction (_super) {\n  __extends(SplitButton, _super);\n\n  function SplitButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {\n      focused: false,\n      focusedIndex: -1,\n      opened: false\n    };\n    _this.wrapper = null;\n    _this.mainButton = null;\n    _this.guid = guid();\n    _this.buttonsData = [];\n\n    _this.onKeyDown = function (event) {\n      var _a = _this.state,\n          opened = _a.opened,\n          focusedIndex = _a.focusedIndex;\n\n      if (event.altKey) {\n        if (!opened && event.keyCode === Keys.down) {\n          _this.dispatchPopupEvent(event, true);\n\n          _this.setState({\n            focusedIndex: 0,\n            opened: true\n          });\n        } else if (opened && event.keyCode === Keys.up) {\n          _this.dispatchPopupEvent(event, false);\n\n          _this.setState({\n            focusedIndex: -1,\n            opened: false\n          });\n        }\n\n        return;\n      }\n\n      var newState = undefined;\n\n      if (event.keyCode === Keys.enter || event.keyCode === Keys.space) {\n        // Prevent default because otherwise when an item is selected\n        // click on the default button gets emitted which opens the popup again.\n        event.preventDefault();\n\n        _this.dispatchClickEvent(event, focusedIndex);\n\n        if (focusedIndex >= 0) {\n          newState = {\n            focusedIndex: opened ? -1 : 0,\n            opened: !opened\n          };\n\n          _this.dispatchPopupEvent(event, newState.opened);\n        }\n      } else if (opened && event.keyCode === Keys.esc) {\n        newState = {\n          focusedIndex: -1,\n          opened: false\n        };\n\n        _this.dispatchPopupEvent(event, newState.opened);\n      }\n\n      if (opened) {\n        var newFocused = navigation(focusedIndex, event.keyCode, event.altKey, _this.buttonsData.length);\n\n        if (newFocused !== focusedIndex) {\n          newState = newState || {};\n          newState.focusedIndex = newFocused;\n        }\n\n        var arrowKey = event.keyCode === Keys.up || event.keyCode === Keys.down || event.keyCode === Keys.left || event.keyCode === Keys.right;\n\n        if (!event.altKey && arrowKey) {\n          // Needed to notify the parent listeners that event is handled.\n          event.preventDefault();\n        }\n      }\n\n      if (newState) {\n        _this.setState(newState);\n      }\n    };\n\n    _this.onFocus = function (event) {\n      dispatchEvent(_this.props.onFocus, event, _this, undefined);\n\n      _this.setState({\n        focused: true,\n        focusedIndex: -1\n      });\n    };\n\n    _this.onItemClick = function (event, clickedItemIndex) {\n      var opened = _this.state.opened;\n\n      if (opened) {\n        _this.setState({\n          focusedIndex: 0,\n          opened: false\n        });\n      }\n\n      _this.dispatchClickEvent(event, clickedItemIndex);\n\n      if (opened) {\n        _this.dispatchPopupEvent(event, false);\n      }\n    };\n\n    _this.onBlur = function (event) {\n      _this.setState({\n        focused: false,\n        focusedIndex: -1,\n        opened: false\n      });\n\n      dispatchEvent(_this.props.onBlur, event, _this, undefined);\n\n      if (_this.state.opened) {\n        _this.dispatchPopupEvent(event, false);\n      }\n    };\n\n    _this.onSplitPartClick = function (event) {\n      if (_this.buttonsData.length) {\n        var opened = _this.state.opened;\n        var toOpen = !opened;\n\n        _this.dispatchPopupEvent(event, toOpen);\n\n        _this.setState({\n          focusedIndex: toOpen ? 0 : -1,\n          opened: toOpen,\n          focused: true\n        });\n      }\n    };\n\n    _this.onDownSplitPart = function (event) {\n      event.preventDefault();\n\n      if (_this.element && document.activeElement !== _this.element) {\n        _this.element.focus();\n      }\n    };\n\n    _this.onItemDown = function (event) {\n      if (document.activeElement === _this.element) {\n        event.preventDefault();\n      }\n    };\n\n    _this.dispatchPopupEvent = function (dispatchedEvent, open) {\n      dispatchEvent(open ? _this.props.onOpen : _this.props.onClose, dispatchedEvent, _this, undefined);\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  SplitButton.prototype.render = function () {\n    var _this = this;\n\n    this.buttonsData = this.props.items || React.Children.toArray(this.props.children).filter(function (child) {\n      return child && child.type === SplitButtonItem;\n    }).map(function (child) {\n      return child.props;\n    });\n    var rtl = this.isRtl();\n    var dir = rtl ? 'rtl' : undefined;\n    var _a = this.props,\n        tabIndex = _a.tabIndex,\n        disabled = _a.disabled;\n    var focusedIndex = this.state.focusedIndex;\n    return React.createElement(\"div\", {\n      className: classNames('k-widget', 'k-split-button', 'k-button-group', this.props.className, {\n        'k-state-focused': this.state.focused\n      }),\n      onKeyDown: this.onKeyDown,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      dir: dir,\n      ref: function ref(el) {\n        return _this.wrapper = el;\n      }\n    }, React.createElement(Button, {\n      onClick: function onClick(event) {\n        return _this.onItemClick(event, -1);\n      },\n      disabled: disabled || undefined,\n      tabIndex: tabIndex,\n      accessKey: this.props.accessKey,\n      className: this.props.buttonClass,\n      icon: this.props.icon,\n      iconClass: this.props.iconClass,\n      imageUrl: this.props.imageUrl,\n      look: this.props.look,\n      dir: dir,\n      \"aria-disabled\": disabled,\n      \"aria-haspopup\": true,\n      \"aria-expanded\": this.state.opened,\n      \"aria-label\": this.props.text + \" splitbutton\",\n      ref: function ref(el) {\n        return _this.mainButton = el && el.element;\n      },\n      \"aria-owns\": this.guid,\n      \"aria-activedescendant\": focusedIndex >= 0 ? this.guid + \"-\" + focusedIndex : undefined\n    }, this.props.text), React.createElement(Button, {\n      icon: \"arrow-s\",\n      disabled: disabled || undefined,\n      tabIndex: -1,\n      look: this.props.look,\n      onClick: this.onSplitPartClick,\n      onMouseDown: this.onDownSplitPart,\n      onPointerDown: this.onDownSplitPart,\n      dir: dir,\n      \"aria-label\": \"menu toggling button\"\n    }), this.renderPopup(rtl));\n  };\n  /**\n   * @hidden\n   */\n\n\n  SplitButton.prototype.componentDidMount = function () {\n    if (this.props.dir === undefined && this.isRtl()) {\n      this.forceUpdate();\n    }\n  };\n\n  Object.defineProperty(SplitButton.prototype, \"element\", {\n    /**\n     * The DOM element of main button.\n     */\n    get: function get() {\n      return this.mainButton;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SplitButton.prototype.dispatchClickEvent = function (dispatchedEvent, clickedItemIndex) {\n    if (!this.isItemDisabled(clickedItemIndex)) {\n      if (clickedItemIndex === -1) {\n        dispatchEvent(this.props.onButtonClick, dispatchedEvent, this, undefined);\n      } else {\n        dispatchEvent(this.props.onItemClick, dispatchedEvent, this, {\n          item: this.buttonsData[clickedItemIndex],\n          itemIndex: clickedItemIndex\n        });\n      }\n    }\n  };\n\n  SplitButton.prototype.renderPopup = function (rtl) {\n    var _a = this.props.popupSettings,\n        popupSettings = _a === void 0 ? {} : _a;\n    return React.createElement(Popup, {\n      anchor: this.wrapper || undefined,\n      show: this.state.opened,\n      animate: popupSettings.animate,\n      popupClass: classNames('k-list-container k-reset k-group', popupSettings.popupClass),\n      anchorAlign: popupSettings.anchorAlign || getAnchorAlign(rtl),\n      popupAlign: popupSettings.popupAlign || getPopupAlign(rtl),\n      style: rtl ? {\n        direction: 'rtl'\n      } : undefined\n    }, React.createElement(\"ul\", {\n      className: \"k-list k-reset\",\n      role: \"menu\",\n      id: this.guid\n    }, this.renderChildItems()));\n  };\n\n  SplitButton.prototype.renderChildItems = function () {\n    var _this = this;\n\n    var _a = this.props,\n        itemRender = _a.itemRender,\n        textField = _a.textField;\n    return this.buttonsData.length > 0 ? this.buttonsData.map(function (item, index) {\n      return React.createElement(ButtonItem, {\n        dataItem: item,\n        textField: textField,\n        focused: _this.state.focusedIndex === index,\n        onClick: _this.onItemClick,\n        onDown: _this.onItemDown,\n        itemRender: itemRender,\n        key: index,\n        index: index,\n        id: _this.guid + \"-\" + index\n      });\n    }) : null;\n  };\n\n  SplitButton.prototype.isItemDisabled = function (index) {\n    return this.buttonsData[index] ? this.buttonsData[index].disabled : this.props.disabled;\n  };\n\n  SplitButton.prototype.isRtl = function () {\n    return this.props.dir !== undefined ? this.props.dir === 'rtl' : !!this.wrapper && getComputedStyle(this.wrapper).direction === 'rtl';\n  };\n  /**\n   * @hidden\n   */\n\n\n  SplitButton.propTypes = {\n    accessKey: PropTypes.string,\n    onButtonClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onItemClick: PropTypes.func,\n    onOpen: PropTypes.func,\n    onClose: PropTypes.func,\n    text: PropTypes.string,\n    items: PropTypes.arrayOf(PropTypes.any),\n    textField: PropTypes.string,\n    tabIndex: PropTypes.number,\n    disabled: PropTypes.bool,\n    icon: PropTypes.string,\n    iconClass: PropTypes.string,\n    imageUrl: PropTypes.string,\n    popupSettings: PropTypes.object,\n    itemRender: PropTypes.any,\n    look: PropTypes.string,\n    className: PropTypes.string,\n    buttonClass: PropTypes.string,\n    dir: PropTypes.string\n  };\n  return SplitButton;\n}(React.Component);\n\nexport default SplitButton;","map":null,"metadata":{},"sourceType":"module"}