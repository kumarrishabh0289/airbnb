{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\n\nvar compareProps = function compareProps(x, y) {\n  var xProps = Object.getOwnPropertyNames(x);\n  var yProps = Object.getOwnPropertyNames(y);\n\n  if (xProps.length !== yProps.length) {\n    return false;\n  }\n\n  for (var i = 0; i < xProps.length; i++) {\n    var propName = xProps[i];\n\n    if (x[propName] !== y[propName]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * The `CalendarCell` component is internally used for rendering the items in the current view. Also be used as a custom `cell` of the [Calendar]({% slug api_dateinputs_calendarprops %}#toc-cell) and the [MultiViewCalendar]({% slug api_dateinputs_multiviewcalendarprops %}#toc-cell).\n *\n * * [Customizing the cells inside the Calendar view]({% slug custom_rendering_calendar %}#toc-cells-inside-the-view)\n * * [Customizing the cells inside the MultiViewCalendar view]({% slug custom_rendering_multiviewcalendar %}#toc-cells-inside-the-view)\n */\n\n\nvar CalendarCell =\n/** @class */\nfunction (_super) {\n  __extends(CalendarCell, _super);\n\n  function CalendarCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // tslint:enable:max-line-length\n\n\n    _this.handleClick = function (event) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          value = _a.value;\n\n      if (onClick) {\n        onClick.call(undefined, value, event);\n      }\n    };\n\n    _this.handleMouseEnter = function () {\n      var _a = _this.props,\n          onMouseEnter = _a.onMouseEnter,\n          value = _a.value;\n\n      if (onMouseEnter) {\n        onMouseEnter.call(undefined, value);\n      }\n    };\n\n    _this.handleMouseLeave = function () {\n      var _a = _this.props,\n          onMouseLeave = _a.onMouseLeave,\n          value = _a.value;\n\n      if (onMouseLeave) {\n        onMouseLeave.call(undefined, value);\n      }\n    };\n\n    return _this;\n  } // Manually checking if the component needs an update\n  // due to date object being compared by instance\n  // and new Date object is created\n  // every time and fails the shallow compare of the React.PureComponent.\n\n  /**\n   * @hidden\n   */\n\n\n  CalendarCell.prototype.shouldComponentUpdate = function (nextProps) {\n    var _a = this.props,\n        value = _a.value,\n        props = __rest(_a, [\"value\"]);\n\n    var newValue = nextProps.value,\n        newProps = __rest(nextProps, [\"value\"]);\n\n    var valueEqual = !(value && newValue) || value.getTime() === newValue.getTime();\n    return !(valueEqual && compareProps(props, newProps));\n  }; // tslint:disable:max-line-length\n\n  /**\n   * @return\n   * Returns a `<td />` element with a `<span className=\"k-link\" />` inside to apply the styles. The text inside is the [`formattedValue`]({% slug api_dateinputs_calendarcellprops %}#toc-formattedvalue) of the `cell`.\n   */\n\n\n  CalendarCell.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        formattedValue = _a.formattedValue,\n        isWeekend = _a.isWeekend,\n        isFocused = _a.isFocused,\n        isSelected = _a.isSelected,\n        isRangeStart = _a.isRangeStart,\n        isRangeMid = _a.isRangeMid,\n        isRangeEnd = _a.isRangeEnd,\n        isRangeSplitStart = _a.isRangeSplitStart,\n        isRangeSplitEnd = _a.isRangeSplitEnd,\n        isToday = _a.isToday,\n        isDisabled = _a.isDisabled,\n        view = _a.view,\n        value = _a.value,\n        other = __rest(_a, [\"className\", \"formattedValue\", \"isWeekend\", \"isFocused\", \"isSelected\", \"isRangeStart\", \"isRangeMid\", \"isRangeEnd\", \"isRangeSplitStart\", \"isRangeSplitEnd\", \"isToday\", \"isDisabled\", \"view\", \"value\"]);\n\n    var isEndActive = this.props.activeRangeEnd === 'end' && isRangeEnd;\n    var isStartActive = this.props.activeRangeEnd === 'start' && isRangeStart;\n    var rootClassName = classNames({\n      'k-range-end': isRangeEnd,\n      'k-range-mid': isRangeMid,\n      'k-range-split-end': isRangeSplitEnd,\n      'k-range-split-start': isRangeSplitStart,\n      'k-range-start': isRangeStart,\n      'k-state-active': isStartActive || isEndActive,\n      'k-state-pending-focus': isFocused,\n      'k-state-selected': isSelected || isRangeStart || isRangeEnd,\n      'k-today': isToday,\n      'k-weekend': isWeekend,\n      'k-state-disabled': isDisabled\n    }, className);\n    return React.createElement(\"td\", __assign({}, other, {\n      className: rootClassName,\n      onClick: this.handleClick,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave\n    }), React.createElement(\"span\", {\n      className: \"k-link\"\n    }, this.props.children));\n  };\n\n  return CalendarCell;\n}(React.Component);\n\nexport { CalendarCell };","map":null,"metadata":{},"sourceType":"module"}