{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { cloneDate, isEqual } from '@progress/kendo-date-math';\nimport { CalendarNavigationItem } from './CalendarNavigationItem';\nimport { dateInRange } from '../../utils';\nimport { Virtualization } from '../../virtualization/Virtualization';\nvar ITEMS_COUNT = 30;\n/**\n * @hidden\n */\n\nvar Navigation =\n/** @class */\nfunction (_super) {\n  __extends(Navigation, _super);\n\n  function Navigation(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.topOffset = 0;\n\n    _this.handleVirtualizationMount = function (virtualization) {\n      _this.virtualization = virtualization;\n\n      if (_this.virtualization && _this.list) {\n        _this.list.style.transform = \"translateY(\" + _this.topOffset + \"px)\";\n        var viewDate = dateInRange(_this.props.focusedDate, _this.props.min, _this.props.max);\n\n        var indexToScroll = _this.props.service.skip(viewDate, _this.props.min);\n\n        _this.virtualization.scrollToIndex(indexToScroll);\n      }\n    };\n\n    _this.buildNavigationItem = function (date) {\n      var text = _this.props.service.navigationTitle(date);\n\n      var isRangeStart = _this.props.service.isRangeStart(date);\n\n      var uniqueID = \"kendo-react-calendar-nav-item-\" + date.getTime();\n      var navigationItemProps = {\n        text: text,\n        value: date,\n        isRangeStart: isRangeStart,\n        view: _this.props.activeView,\n        onClick: _this.handleDateChange\n      };\n      return _this.props.navigationItem ? React.createElement(_this.props.navigationItem, __assign({}, navigationItemProps, {\n        key: uniqueID\n      }), text) : React.createElement(CalendarNavigationItem, __assign({}, navigationItemProps, {\n        key: uniqueID\n      }), text);\n    };\n\n    _this.calculateHeights = function () {\n      var calendarHeight = _this.props.dom.calendarHeight;\n      _this.itemHeight = _this.props.dom.navigationItemHeight || 1;\n      _this.maxViewHeight = _this.props.dom.monthViewHeight;\n      _this.topOffset = (calendarHeight - _this.itemHeight) / 2;\n      _this.bottomOffset = calendarHeight - _this.itemHeight;\n    };\n\n    _this.handleDateChange = function (value, event) {\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        var args = {\n          value: cloneDate(value),\n          target: _this,\n          nativeEvent: event && event.nativeEvent,\n          syntheticEvent: event\n        };\n        onChange.call(undefined, args);\n      }\n    };\n\n    _this.handleScrollAction = function (_a) {\n      var scrollAction = _a.scrollAction,\n          pageAction = _a.pageAction;\n      var skip = pageAction ? pageAction.skip : _this.state.skip;\n\n      if (_this.state.skip !== skip) {\n        _this.setState({\n          skip: skip\n        });\n      }\n\n      if (_this.list && scrollAction) {\n        var translate = \"translateY(\" + scrollAction.offset + \"px)\";\n        _this.list.style.transform = translate;\n      }\n    };\n\n    _this.lastView = _this.props.activeView;\n    _this.lastFocus = _this.props.focusedDate;\n\n    var skip = _this.props.service.skip(_this.props.focusedDate, _this.props.min);\n\n    var total = _this.props.service.total(_this.props.min, _this.props.max);\n\n    _this.state = {\n      skip: skip - _this.getTake(skip, total) > 0 ? skip : 0\n    };\n    return _this;\n  }\n\n  Object.defineProperty(Navigation.prototype, \"take\", {\n    get: function get() {\n      return this.props.take !== undefined ? this.props.take : Navigation.defaultProps.take;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  Navigation.prototype.componentDidUpdate = function (_prevProps, _prevState) {\n    if (this.indexToScroll !== undefined && this.virtualization) {\n      this.virtualization.scrollToIndex(this.indexToScroll);\n    }\n\n    this.lastView = this.props.activeView;\n    this.lastFocus = this.props.focusedDate;\n    this.indexToScroll = undefined;\n  };\n\n  Navigation.prototype.render = function () {\n    var _this = this;\n\n    this.calculateHeights();\n    var didViewChange = this.lastView !== this.props.activeView;\n    var focusedDate = dateInRange(this.props.focusedDate, this.props.min, this.props.max);\n    var skip = !didViewChange ? this.state.skip : this.props.service.skip(focusedDate, this.props.min);\n    var total = this.props.service.total(this.props.min, this.props.max);\n    var take = this.getTake(skip, total);\n    var viewDate = this.props.service.addToDate(this.props.min, skip);\n    var dates = this.props.service.datesList(viewDate, take);\n\n    if (this.props.activeView !== this.lastView || !isEqual(focusedDate, this.lastFocus)) {\n      this.indexToScroll = this.props.service.skip(focusedDate, this.props.min);\n    }\n\n    var navigationBody = React.createElement(Virtualization, {\n      skip: skip,\n      take: this.take,\n      total: total,\n      itemHeight: this.itemHeight,\n      topOffset: this.topOffset,\n      bottomOffset: this.bottomOffset,\n      maxScrollDifference: this.maxViewHeight,\n      onScrollAction: this.handleScrollAction,\n      onMount: this.handleVirtualizationMount\n    }, React.createElement(\"ul\", {\n      ref: function ref(el) {\n        _this.list = el;\n      },\n      className: \"k-reset\"\n    }, dates.map(function (date) {\n      return _this.buildNavigationItem(date);\n    })));\n    return React.createElement(\"div\", {\n      className: \"k-calendar-navigation\"\n    }, React.createElement(\"span\", {\n      className: \"k-calendar-navigation-highlight\"\n    }), this.props.dom.didCalculate ? navigationBody : null);\n  };\n\n  Navigation.prototype.getTake = function (skip, total) {\n    return Math.min(total - skip, this.take);\n  };\n\n  Navigation.propTypes = {\n    activeView: PropTypes.number.isRequired,\n    focusedDate: PropTypes.instanceOf(Date).isRequired,\n    max: PropTypes.instanceOf(Date).isRequired,\n    min: PropTypes.instanceOf(Date).isRequired,\n    onChange: PropTypes.func,\n    take: PropTypes.number\n  };\n  Navigation.defaultProps = {\n    take: ITEMS_COUNT\n  };\n  return Navigation;\n}(React.Component);\n\nexport { Navigation };","map":null,"metadata":{},"sourceType":"module"}