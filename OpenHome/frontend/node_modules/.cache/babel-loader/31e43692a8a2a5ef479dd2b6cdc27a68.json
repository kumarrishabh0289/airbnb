{"ast":null,"code":"import { eitherRect, replaceOffset } from '../util';\n/**\n * @hidden\n */\n\nvar PositionService =\n/** @class */\nfunction () {\n  function PositionService(_dom) {\n    this._dom = _dom;\n  }\n\n  PositionService.prototype.positionElement = function (settings) {\n    var anchor = settings.anchor,\n        currentLocation = settings.currentLocation,\n        element = settings.element,\n        anchorAlign = settings.anchorAlign,\n        elementAlign = settings.elementAlign,\n        collisions = settings.collisions;\n    var dom = this._dom;\n    var viewPort = settings.viewPort || dom.stackingElementViewPort(element) || dom.windowViewPort(element);\n    var anchorRect = eitherRect(dom.offset(anchor), currentLocation);\n    var initialElementRect = replaceOffset(dom.staticOffset(element), currentLocation);\n    var elementRect = this.elementRect(element, initialElementRect);\n    var result = dom.restrictToView({\n      anchorAlign: anchorAlign,\n      anchorRect: anchorRect,\n      collisions: collisions,\n      elementAlign: elementAlign,\n      elementRect: elementRect,\n      viewPort: viewPort\n    });\n    return {\n      flipped: result.flipped,\n      offset: dom.addOffset(initialElementRect, result.offset)\n    };\n  };\n\n  PositionService.prototype.elementRect = function (element, rect) {\n    return this._dom.removeScroll(rect, this._dom.scrollPosition(element));\n  };\n\n  return PositionService;\n}();\n\nexport { PositionService };","map":null,"metadata":{},"sourceType":"module"}