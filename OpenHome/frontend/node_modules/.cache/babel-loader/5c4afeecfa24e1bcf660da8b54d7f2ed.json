{"ast":null,"code":"/**\n * @hidden\n */\nexport var defaultFormat = 'd';\n/**\n * @hidden\n */\n\nexport var defaultFormatPlaceholder = 'wide';\n/**\n * @hidden\n */\n\nexport var padZero = function padZero(length) {\n  return new Array(Math.max(length, 0)).fill('0').join('');\n};\n/**\n * @hidden\n */\n\nexport var approximateStringMatching = function approximateStringMatching(oldTextOrigin, oldFormat, newTextOrigin, selectionStart) {\n  /*\n    Remove the right part of the cursor.\n    oldFormat = oldFormat.substring(0, caret + oldText.length - newText.length);\n  */\n  var oldTextSeparator = oldTextOrigin[selectionStart + oldTextOrigin.length - newTextOrigin.length];\n  var oldText = oldTextOrigin.substring(0, selectionStart + oldTextOrigin.length - newTextOrigin.length);\n  var newText = newTextOrigin.substring(0, selectionStart);\n  var diff = [];\n  /* Handle the typing of a single character over the same selection. */\n\n  if (oldText === newText && selectionStart > 0) {\n    diff.push([oldFormat[selectionStart - 1], newText[selectionStart - 1]]);\n    return diff;\n  }\n\n  if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {\n    /* Handle Delete/Backspace. */\n    var deletedSymbol = '';\n    /*\n        The whole text is replaced by the same character.\n        A nasty patch is required to keep the selection in the first segment.\n    */\n\n    if (newText.length === 1) {\n      diff.push([oldFormat[0], newText[0]]);\n    }\n\n    for (var i = newText.length; i < oldText.length; i++) {\n      if (oldFormat[i] !== deletedSymbol && oldFormat[i] !== '_') {\n        deletedSymbol = oldFormat[i];\n        diff.push([deletedSymbol, '']);\n      }\n    }\n\n    return diff;\n  }\n  /*\n      Handle the insertion of the text (the new text is longer than the previous one).\n      Handle the typing over a literal as well.\n  */\n\n\n  if (newText.indexOf(oldText) === 0 || oldFormat[selectionStart - 1] === '_') {\n    var symbol = oldFormat[0];\n\n    for (var i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {\n      if (oldFormat[i] !== '_') {\n        symbol = oldFormat[i];\n        break;\n      }\n    }\n\n    return [[symbol, newText[selectionStart - 1]]];\n  }\n  /* Handle the entering of a space or a separator for navigating to the next item. */\n\n\n  if (newText[newText.length - 1] === ' ' || newText[newText.length - 1] === oldTextSeparator) {\n    return [[oldFormat[selectionStart - 1], '_']];\n  }\n  /* Handle typing over a correctly selected part. */\n\n\n  return [[oldFormat[selectionStart - 1], newText[selectionStart - 1]]];\n};\n/**\n * @hidden\n */\n\nexport var dateSymbolMap = function dateSymbolMap(map, part) {\n  map[part.pattern[0]] = part.type;\n  return map;\n};\n/**\n * @hidden\n */\n\nexport var isInRange = function isInRange(candidate, min, max) {\n  return candidate === null || !(min && min > candidate || max && max < candidate);\n};\n/**\n * @hidden\n */\n\nexport var invalidClasses = ['k-state-invalid'];\n/**\n * @hidden\n */\n\nexport var wrapperClasses = ['k-widget', 'k-dateinput'];","map":null,"metadata":{},"sourceType":"module"}