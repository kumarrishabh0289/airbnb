{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar _a, _b, _c;\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '@progress/kendo-react-common';\nimport { RowHeightService, ScrollerService } from './services';\n/**\n * @hidden\n */\n\nexport var ScrollDirection;\n\n(function (ScrollDirection) {\n  ScrollDirection[ScrollDirection[\"Backward\"] = 0] = \"Backward\";\n  ScrollDirection[ScrollDirection[\"Forward\"] = 1] = \"Forward\";\n})(ScrollDirection || (ScrollDirection = {}));\n\nvar differenceToScroll = function differenceToScroll(scrollTop, staticOffset, maxScrollDifference) {\n  return Math.min(Math.abs(staticOffset - scrollTop), maxScrollDifference);\n};\n\nvar FRAME_DURATION = 17;\nvar scrollModifiers = (_a = {}, _a[ScrollDirection.Forward] = function (step) {\n  return function (value) {\n    return value + step;\n  };\n}, _a[ScrollDirection.Backward] = function (step) {\n  return function (value) {\n    return value - step;\n  };\n}, _a);\nvar scrollNormalizers = (_b = {}, _b[ScrollDirection.Forward] = function (end) {\n  return function (value) {\n    return Math.min(value, end);\n  };\n}, _b[ScrollDirection.Backward] = function (end) {\n  return function (value) {\n    return Math.max(value, end);\n  };\n}, _b);\nvar scrollValidators = (_c = {}, _c[ScrollDirection.Forward] = function (end) {\n  return function (start) {\n    return start < end;\n  };\n}, _c[ScrollDirection.Backward] = function (end) {\n  return function (start) {\n    return start > end;\n  };\n}, _c);\n/**\n * @hidden\n */\n\nvar Virtualization =\n/** @class */\nfunction (_super) {\n  __extends(Virtualization, _super);\n\n  function Virtualization(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.animationInProgress = false;\n\n    _this.scrollTo = function (value) {\n      var scrollProperty = _this.direction === 'vertical' ? 'scrollTop' : 'scrollLeft';\n\n      if (!_this.scrollContainer) {\n        return;\n      }\n\n      _this.scrollContainer[scrollProperty] = value;\n    };\n\n    _this.scrollToIndex = function (index) {\n      if (!_this.rowHeightService) {\n        return;\n      }\n\n      _this.animationInProgress = false;\n\n      _this.scrollTo(_this.rowHeightService.offset(index));\n    };\n\n    _this.animateToIndex = function (index) {\n      if (!_this.rowHeightService || !window) {\n        return;\n      }\n\n      window.cancelAnimationFrame(_this.cancelAnimation);\n\n      var indexOffset = _this.rowHeightService.offset(index);\n\n      var direction = _this.getContainerScrollDirection(indexOffset);\n\n      var _a = _this.scrollRange(indexOffset, direction),\n          start = _a.start,\n          end = _a.end;\n\n      if (start === end) {\n        return;\n      }\n\n      var step = _this.scrollStep(start, end);\n\n      var modifyScroll = scrollModifiers[direction](step);\n      var normalizeScroll = scrollNormalizers[direction](end);\n      var isScrollValid = scrollValidators[direction](modifyScroll(end));\n\n      var animate = function animate(progress) {\n        _this.animationInProgress = true;\n        var next = modifyScroll(progress);\n\n        _this.scrollTo(normalizeScroll(next));\n\n        isScrollValid(next) ? _this.cancelAnimation = window.requestAnimationFrame(function () {\n          animate(next);\n        }) : _this.animationInProgress = false;\n      };\n\n      _this.cancelAnimation = window.requestAnimationFrame(function () {\n        animate(start);\n      });\n    };\n\n    _this.scrollToBottom = function () {\n      if (!_this.rowHeightService) {\n        return;\n      }\n\n      _this.scrollTo(_this.rowHeightService.totalHeight() + _this.props.bottomOffset);\n    };\n\n    _this.scrollStep = function (start, end) {\n      var duration = _this.props.scrollDuration || Virtualization.defaultProps.scrollDuration;\n      return Math.abs(end - start) / (duration / FRAME_DURATION);\n    };\n\n    _this.scrollRange = function (indexOffset, direction) {\n      var containerScroll = _this.containerScrollPosition;\n\n      if (parseInt(\"\" + indexOffset, 10) === parseInt(\"\" + containerScroll, 10)) {\n        return {\n          start: indexOffset,\n          end: indexOffset\n        };\n      }\n\n      var maxScroll = _this.containerMaxScroll();\n\n      var sign = direction === ScrollDirection.Backward ? 1 : -1;\n      var difference = differenceToScroll(containerScroll, indexOffset, _this.props.maxScrollDifference);\n      var end = Math.min(indexOffset, maxScroll);\n      var start = Math.min(Math.max(end + sign * difference, 0), maxScroll);\n      return {\n        start: start,\n        end: end\n      };\n    };\n\n    _this.containerMaxScroll = function () {\n      return _this.containerScrollSize - _this.containerOffsetSize;\n    };\n\n    _this.getContainerScrollDirection = function (indexOffset) {\n      return indexOffset < _this.containerScrollPosition ? ScrollDirection.Backward : ScrollDirection.Forward;\n    };\n\n    _this.initServices = function (props) {\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      var dimension = _this.direction === 'vertical' ? props.itemHeight : props.itemWidth;\n\n      if (dimension === undefined) {\n        return;\n      }\n\n      _this.rowHeightService = new RowHeightService(props.total, dimension, 0);\n\n      _this.scrollerService.create(_this.rowHeightService, props.skip, props.take, props.total, props.topOffset, _this.scrollOffsetSize, _this.direction);\n    };\n\n    _this.getContainerProperty = function (propertyName) {\n      if (!_this.scrollContainer) {\n        return 0;\n      }\n\n      return _this.scrollContainer[propertyName];\n    };\n\n    _this.handleScroll = function (event) {\n      if (!_this.scrollContainer || !_this.rowHeightService) {\n        return;\n      }\n\n      var target = event.target;\n\n      _this.scrollerService.onScroll({\n        scrollLeft: target.scrollLeft,\n        scrollTop: target.scrollTop,\n        offsetHeight: target.offsetHeight,\n        offsetWidth: target.offsetWidth\n      });\n\n      var index = _this.rowHeightService.index(_this.containerScrollPosition - _this.props.topOffset);\n\n      var onScrollAction = _this.props.onScrollAction;\n      var args = {\n        index: index,\n        target: target,\n        scrollAction: _this.scrollAction,\n        pageAction: _this.pageAction,\n        animationInProgress: _this.animationInProgress\n      };\n\n      if (onScrollAction) {\n        onScrollAction.call(undefined, args);\n      }\n\n      _this.scrollAction = undefined;\n      _this.pageAction = undefined;\n    };\n\n    _this.handleScrollAction = function (action) {\n      _this.scrollAction = action;\n    };\n\n    _this.handlePageAction = function (action) {\n      _this.pageAction = action;\n    };\n\n    _this.scrollerService = new ScrollerService(_this.handleScrollAction, _this.handlePageAction);\n    return _this;\n  }\n\n  Object.defineProperty(Virtualization.prototype, \"element\", {\n    get: function get() {\n      return this.scrollContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Virtualization.prototype, \"containerOffsetSize\", {\n    get: function get() {\n      return this.getContainerProperty(this.direction === 'vertical' ? 'offsetHeight' : 'offsetWidth');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Virtualization.prototype, \"containerScrollSize\", {\n    get: function get() {\n      return this.getContainerProperty(this.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Virtualization.prototype, \"containerScrollPosition\", {\n    get: function get() {\n      return this.getContainerProperty(this.direction === 'vertical' ? 'scrollTop' : 'scrollLeft');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Virtualization.prototype, \"direction\", {\n    get: function get() {\n      return this.props.direction !== undefined ? this.props.direction : Virtualization.defaultProps.direction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Virtualization.prototype, \"scrollOffsetSize\", {\n    get: function get() {\n      return this.props.scrollOffsetSize !== undefined ? this.props.scrollOffsetSize : Virtualization.defaultProps.scrollOffsetSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Virtualization.prototype.activeIndex = function () {\n    return this.itemIndex(Math.ceil(this.containerScrollPosition));\n  };\n\n  Virtualization.prototype.itemIndex = function (offset) {\n    if (!this.rowHeightService) {\n      return 0;\n    }\n\n    return this.rowHeightService.index(offset);\n  };\n\n  Virtualization.prototype.itemOffset = function (index) {\n    if (!this.rowHeightService) {\n      return 0;\n    }\n\n    return this.rowHeightService.offset(index);\n  };\n\n  Virtualization.prototype.isIndexVisible = function (index) {\n    if (!this.rowHeightService) {\n      return false;\n    }\n\n    var containerTop = this.containerScrollPosition;\n    var containerBottom = containerTop + this.containerOffsetSize;\n    var top = this.rowHeightService.offset(index);\n    var bottom = top + this.rowHeightService.height(index);\n    return top >= containerTop && bottom <= containerBottom;\n  };\n\n  Virtualization.prototype.isListScrolled = function (index) {\n    if (!this.rowHeightService) {\n      return false;\n    }\n\n    return this.containerScrollPosition !== this.rowHeightService.offset(index);\n  };\n\n  Virtualization.prototype.componentDidMount = function () {\n    var onMount = this.props.onMount;\n\n    if (onMount) {\n      onMount.call(undefined, this);\n    }\n  };\n\n  Virtualization.prototype.render = function () {\n    var _this = this;\n\n    if (this.lastTotal !== this.props.total || this.lastDirection !== this.direction || this.lastTake !== this.props.take) {\n      this.initServices();\n      this.lastTotal = this.props.total;\n      this.lastDirection = this.direction;\n      this.lastTake = this.props.take;\n    }\n\n    var vertexLength = \"\" + ((this.rowHeightService ? this.rowHeightService.totalHeight() : 0) + this.props.bottomOffset);\n    var placeholderStyle = this.direction === 'vertical' ? {\n      height: vertexLength + \"px\"\n    } : {\n      width: vertexLength + \"px\"\n    };\n    var rootClassNames = classNames('k-content k-scrollable', {\n      'k-scrollable-horizontal': this.direction === 'horizontal'\n    }, this.props.className);\n    var scrollableClassNames = classNames('k-scrollable-placeholder', {\n      'k-scrollable-horizontal-placeholder': this.direction === 'horizontal'\n    });\n    return React.createElement(\"div\", {\n      ref: function ref(el) {\n        _this.scrollContainer = el;\n      },\n      onScroll: this.handleScroll,\n      className: rootClassNames,\n      tabIndex: this.props.tabIndex,\n      role: this.props.role\n    }, this.props.children, React.createElement(\"div\", {\n      style: placeholderStyle,\n      className: scrollableClassNames\n    }));\n  };\n\n  Virtualization.propTypes = {\n    bottomOffset: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    direction: PropTypes.oneOf(['horizontal', 'vertical']),\n    forceScroll: PropTypes.bool,\n    itemHeight: PropTypes.number,\n    itemWidth: PropTypes.number,\n    maxScrollDifference: PropTypes.number,\n    onScroll: PropTypes.func,\n    onScrollAction: PropTypes.func,\n    scrollDuration: PropTypes.number,\n    scrollOffsetSize: PropTypes.number,\n    skip: PropTypes.number.isRequired,\n    tabIndex: PropTypes.number,\n    take: PropTypes.number.isRequired,\n    topOffset: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    role: PropTypes.string\n  };\n  Virtualization.defaultProps = {\n    direction: 'vertical',\n    forceScroll: false,\n    scrollOffsetSize: 0,\n    maxScrollDifference: 100,\n    scrollDuration: 100\n  };\n  return Virtualization;\n}(React.Component);\n\nexport { Virtualization };","map":null,"metadata":{},"sourceType":"module"}