{"ast":null,"code":"var _a;\n/* tslint:disable:object-literal-sort-keys */\n\n\nimport { addDecades, addCenturies, cloneDate, durationInCenturies, firstYearOfDecade, firstDecadeOfCentury, lastDecadeOfCentury } from '@progress/kendo-date-math';\nimport { Action, EMPTY_SELECTIONRANGE } from '../models';\nimport { getToday, isInRange, isInSelectionRange, range } from '../../utils';\nvar EMPTY_DATA = [[]];\nvar CELLS_LENGTH = 5;\nvar ROWS_LENGTH = 2;\nvar ACTIONS = (_a = {}, _a[Action.Left] = function (date) {\n  return addDecades(date, -1);\n}, _a[Action.Up] = function (date) {\n  return addDecades(date, -5);\n}, _a[Action.Right] = function (date) {\n  return addDecades(date, 1);\n}, _a[Action.Down] = function (date) {\n  return addDecades(date, 5);\n}, _a[Action.PrevView] = function (date) {\n  return addCenturies(date, -1);\n}, _a[Action.NextView] = function (date) {\n  return addCenturies(date, 1);\n}, _a[Action.FirstInView] = function (date) {\n  return firstDecadeOfCentury(date);\n}, _a[Action.LastInView] = function (date) {\n  return lastDecadeOfCentury(date);\n}, _a);\n/**\n * @hidden\n */\n\nvar CenturyViewService =\n/** @class */\nfunction () {\n  function CenturyViewService() {}\n\n  CenturyViewService.prototype.addToDate = function (min, skip) {\n    return addCenturies(min, skip);\n  };\n\n  CenturyViewService.prototype.datesList = function (start, count) {\n    return range(0, count).map(function (i) {\n      return addCenturies(start, i);\n    });\n  };\n\n  CenturyViewService.prototype.data = function (options) {\n    var _this = this;\n\n    var cellUID = options.cellUID,\n        focusedDate = options.focusedDate,\n        isActiveView = options.isActiveView,\n        max = options.max,\n        min = options.min,\n        selectedDate = options.selectedDate,\n        _a = options.selectionRange,\n        selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a,\n        viewDate = options.viewDate;\n\n    if (!viewDate) {\n      return EMPTY_DATA;\n    }\n\n    var cells = range(0, CELLS_LENGTH);\n    var firstDate = firstDecadeOfCentury(viewDate);\n    var lastDate = lastDecadeOfCentury(viewDate);\n    var today = getToday();\n    return range(0, ROWS_LENGTH).map(function (rowOffset) {\n      var baseDate = addDecades(firstDate, rowOffset * CELLS_LENGTH);\n      return cells.map(function (cellOffset) {\n        var cellDate = _this.normalize(addDecades(baseDate, cellOffset), min, max);\n\n        if (!_this.isInRange(cellDate, min, max)) {\n          return null;\n        }\n\n        var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n\n        var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n\n        var isInMiddle = !isRangeStart && !isRangeEnd;\n        var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n        var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));\n        return {\n          formattedValue: _this.value(cellDate),\n          id: \"\" + cellUID + cellDate.getTime(),\n          isFocused: _this.isEqual(cellDate, focusedDate),\n          isSelected: isSelected,\n          isWeekend: false,\n          isRangeStart: isRangeStart,\n          isRangeMid: isRangeMid,\n          isRangeEnd: isRangeEnd,\n          isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),\n          isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),\n          isToday: _this.isEqual(cellDate, today),\n          title: _this.cellTitle(cellDate),\n          value: cellDate\n        };\n      });\n    });\n  };\n\n  CenturyViewService.prototype.isSelectedFromArray = function (candidate, dates, min, max) {\n    var _this = this;\n\n    var result = false;\n    dates.forEach(function (date) {\n      if (isInRange(candidate, min, max) && _this.isEqual(candidate, date)) {\n        result = true;\n      }\n    });\n    return result;\n  };\n\n  CenturyViewService.prototype.isEqual = function (candidate, expected) {\n    if (!candidate || !expected) {\n      return false;\n    } // TODO: double-check this!\n\n\n    return firstYearOfDecade(candidate).getFullYear() === firstYearOfDecade(expected).getFullYear();\n  };\n\n  CenturyViewService.prototype.isInArray = function (date, dates) {\n    if (!dates.length) {\n      return false;\n    }\n\n    var year = date.getFullYear();\n    return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear() + 99;\n  };\n\n  CenturyViewService.prototype.isInRange = function (candidate, min, max) {\n    var year = firstYearOfDecade(candidate).getFullYear();\n    var aboveMin = !min || firstYearOfDecade(min).getFullYear() <= year;\n    var belowMax = !max || year <= firstYearOfDecade(max).getFullYear();\n    return aboveMin && belowMax;\n  };\n\n  CenturyViewService.prototype.isInSameView = function (candidate, value) {\n    return durationInCenturies(candidate, value) === 0;\n  };\n\n  CenturyViewService.prototype.isRangeStart = function (value) {\n    return value.getFullYear() % 1000 === 0;\n  };\n\n  CenturyViewService.prototype.move = function (value, action) {\n    var modifier = ACTIONS[action];\n\n    if (!modifier) {\n      return value;\n    }\n\n    return modifier(value);\n  };\n\n  CenturyViewService.prototype.cellTitle = function (value) {\n    return firstYearOfDecade(value).getFullYear().toString();\n  };\n\n  CenturyViewService.prototype.navigationTitle = function (value) {\n    return value ? firstDecadeOfCentury(value).getFullYear().toString() : '';\n  };\n\n  CenturyViewService.prototype.title = function (value) {\n    if (!value) {\n      return '';\n    }\n\n    return firstDecadeOfCentury(value).getFullYear() + \" - \" + lastDecadeOfCentury(value).getFullYear();\n  };\n\n  CenturyViewService.prototype.rowLength = function (_) {\n    return CELLS_LENGTH;\n  };\n\n  CenturyViewService.prototype.skip = function (value, min) {\n    return durationInCenturies(min, value);\n  };\n\n  CenturyViewService.prototype.total = function (min, max) {\n    return durationInCenturies(min, max) + 1;\n  };\n\n  CenturyViewService.prototype.value = function (current) {\n    return current ? firstYearOfDecade(current).getFullYear().toString() : '';\n  };\n\n  CenturyViewService.prototype.viewDate = function (date, max, border) {\n    if (border === void 0) {\n      border = 1;\n    }\n\n    var renderTwoViews = durationInCenturies(date, max) < border;\n    return renderTwoViews ? addCenturies(date, -1) : date;\n  };\n\n  CenturyViewService.prototype.normalize = function (cellDate, min, max) {\n    if (cellDate < min && this.isEqual(cellDate, min)) {\n      return cloneDate(min);\n    }\n\n    if (cellDate > max && this.isEqual(cellDate, max)) {\n      return cloneDate(max);\n    }\n\n    return cellDate;\n  };\n\n  return CenturyViewService;\n}();\n\nexport { CenturyViewService };","map":null,"metadata":{},"sourceType":"module"}