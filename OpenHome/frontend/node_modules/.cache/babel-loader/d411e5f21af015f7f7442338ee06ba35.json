{"ast":null,"code":"var normalize = function normalize(x) {\n  return Math.max(x, 0);\n};\n/**\n * @hidden\n */\n\n\nvar ScrollAction =\n/** @class */\nfunction () {\n  function ScrollAction(offset) {\n    this.offset = offset;\n  }\n\n  return ScrollAction;\n}();\n\nexport { ScrollAction };\n/**\n * @hidden\n */\n\nvar PageAction =\n/** @class */\nfunction () {\n  function PageAction(skip) {\n    this.skip = skip;\n  }\n\n  return PageAction;\n}();\n\nexport { PageAction };\n/**\n * @hidden\n */\n\nvar ScrollerService =\n/** @class */\nfunction () {\n  function ScrollerService(onScrollAction, onPageAction) {\n    this.onScrollAction = onScrollAction;\n    this.onPageAction = onPageAction;\n    this.firstLoaded = 0;\n    this.bottomOffset = 0;\n    this.topOffset = 0;\n  }\n\n  ScrollerService.prototype.create = function (rowHeightService, skip, take, total, topOffset, bottomOffset, direction) {\n    if (topOffset === void 0) {\n      topOffset = 0;\n    }\n\n    if (bottomOffset === void 0) {\n      bottomOffset = 0;\n    }\n\n    if (direction === void 0) {\n      direction = 'vertical';\n    }\n\n    this.rowHeightService = rowHeightService;\n    this.firstLoaded = skip;\n    this.lastLoaded = skip + take;\n    this.take = take;\n    this.total = total;\n    this.lastScrollTop = 0;\n    this.topOffset = topOffset;\n    this.bottomOffset = bottomOffset;\n    this.direction = direction;\n    var offsetBufferRows = this.rowsForHeight(topOffset);\n    var skipWithOffset = normalize(skip - offsetBufferRows);\n    this.onScrollAction(new ScrollAction(this.rowOffset(skipWithOffset)));\n    this.onPageAction(new PageAction(skipWithOffset));\n  };\n\n  ScrollerService.prototype.onScroll = function (_a) {\n    var scrollLeft = _a.scrollLeft,\n        scrollTop = _a.scrollTop,\n        offsetHeight = _a.offsetHeight,\n        offsetWidth = _a.offsetWidth;\n    var scrollPosition = this.direction === 'vertical' ? scrollTop : scrollLeft;\n    var offsetSize = this.direction === 'vertical' ? offsetHeight : offsetWidth;\n\n    if (this.lastScrollTop === scrollPosition) {\n      return;\n    }\n\n    var up = this.lastScrollTop >= scrollPosition;\n    this.lastScrollTop = scrollPosition;\n    var firstItemIndex = this.rowHeightService.index(normalize(scrollPosition - this.topOffset));\n    var lastItemIndex = this.rowHeightService.index(normalize(scrollPosition + offsetSize - this.bottomOffset));\n\n    if (!up && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {\n      this.firstLoaded = firstItemIndex;\n      this.onScrollAction(new ScrollAction(this.rowOffset(firstItemIndex)));\n      this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);\n      this.onPageAction(new PageAction(this.firstLoaded));\n    }\n\n    if (up && firstItemIndex <= this.firstLoaded) {\n      var nonVisibleBuffer = Math.floor(this.take * 0.3);\n      this.firstLoaded = normalize(firstItemIndex - nonVisibleBuffer);\n      this.onScrollAction(new ScrollAction(this.rowOffset(this.firstLoaded)));\n      this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);\n      this.onPageAction(new PageAction(this.firstLoaded));\n    }\n  };\n\n  ScrollerService.prototype.rowOffset = function (index) {\n    return this.rowHeightService.offset(index) + this.topOffset;\n  };\n\n  ScrollerService.prototype.rowsForHeight = function (height) {\n    return Math.ceil(height / this.rowHeightService.height(0));\n  };\n\n  return ScrollerService;\n}();\n\nexport { ScrollerService };","map":null,"metadata":{},"sourceType":"module"}