{"ast":null,"code":"import { align, applyLocationOffset, boundingOffset, getWindowViewPort, isBodyOffset, offset, positionWithScroll, restrictToView, addScroll, removeScroll, scrollPosition, siblingContainer } from '@progress/kendo-popup-common';\nimport { HAS_RELATIVE_STACKING_CONTEXT, scrollableParents, zIndex } from '../util';\nimport { canUseDOM } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\n\nvar DOMService =\n/** @class */\nfunction () {\n  function DOMService() {}\n\n  DOMService.prototype.addOffset = function (current, addition) {\n    return {\n      left: current.left + addition.left,\n      top: current.top + addition.top\n    };\n  };\n\n  DOMService.prototype.align = function (settings) {\n    return align(settings);\n  };\n\n  DOMService.prototype.boundingOffset = function (el) {\n    return boundingOffset(el);\n  };\n\n  DOMService.prototype.getWindow = function () {\n    return canUseDOM ? window : null;\n  };\n\n  DOMService.prototype.isBodyOffset = function (el) {\n    return isBodyOffset(el);\n  };\n\n  DOMService.prototype.hasOffsetParent = function (el) {\n    if (!el) {\n      return false;\n    }\n\n    var offsetParentEl = el.offsetParent;\n    return offsetParentEl && !(offsetParentEl.nodeName === 'BODY' && window.getComputedStyle(offsetParentEl).position === 'static');\n  };\n\n  DOMService.prototype.offset = function (el) {\n    if (!el) {\n      return null;\n    }\n\n    return offset(el);\n  };\n\n  DOMService.prototype.staticOffset = function (element) {\n    if (!element) {\n      return null;\n    }\n\n    var _a = element.style,\n        left = _a.left,\n        top = _a.top;\n    element.style.left = '0px';\n    element.style.top = '0px';\n    var currentOffset = offset(element);\n    element.style.left = left;\n    element.style.top = top;\n    return currentOffset;\n  };\n\n  DOMService.prototype.position = function (element, popup) {\n    if (!element || !popup) {\n      return null;\n    }\n\n    var parentSibling = siblingContainer(element, popup);\n    return positionWithScroll(element, parentSibling);\n  };\n\n  DOMService.prototype.relativeOffset = function (el, currentLocation) {\n    return applyLocationOffset(this.offset(el), currentLocation, this.isBodyOffset(el));\n  };\n\n  DOMService.prototype.addScroll = function (rect, scroll) {\n    return addScroll(rect, scroll);\n  };\n\n  DOMService.prototype.removeScroll = function (rect, scroll) {\n    return removeScroll(rect, scroll);\n  };\n\n  DOMService.prototype.restrictToView = function (settings) {\n    return restrictToView(settings);\n  };\n\n  DOMService.prototype.scrollPosition = function (el) {\n    return scrollPosition(el);\n  };\n\n  DOMService.prototype.scrollableParents = function (el) {\n    return scrollableParents(el);\n  };\n\n  DOMService.prototype.stackingElementOffset = function (el) {\n    var relativeContextElement = this.getRelativeContextElement(el);\n\n    if (!relativeContextElement) {\n      return null;\n    }\n\n    return offset(relativeContextElement);\n  };\n\n  DOMService.prototype.stackingElementScroll = function (el) {\n    var relativeContextElement = this.getRelativeContextElement(el);\n\n    if (!relativeContextElement) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n\n    return {\n      x: relativeContextElement.scrollLeft,\n      y: relativeContextElement.scrollTop\n    };\n  };\n\n  DOMService.prototype.stackingElementViewPort = function (el) {\n    var relativeContextElement = this.getRelativeContextElement(el);\n\n    if (!relativeContextElement) {\n      return null;\n    }\n\n    return {\n      height: relativeContextElement.scrollHeight,\n      width: relativeContextElement.scrollWidth\n    };\n  };\n\n  DOMService.prototype.getRelativeContextElement = function (el) {\n    if (!el || !HAS_RELATIVE_STACKING_CONTEXT) {\n      return null;\n    }\n\n    var parent = el.parentElement;\n\n    while (parent) {\n      if (window.getComputedStyle(parent).transform !== 'none') {\n        return parent;\n      }\n\n      parent = parent.parentElement;\n    }\n\n    return null;\n  };\n\n  DOMService.prototype.useRelativePosition = function (el) {\n    return !!this.getRelativeContextElement(el);\n  };\n\n  DOMService.prototype.windowViewPort = function (el) {\n    return getWindowViewPort(el);\n  };\n\n  DOMService.prototype.zIndex = function (anchor, container) {\n    return zIndex(anchor, container);\n  };\n\n  DOMService.prototype.zoomLevel = function () {\n    if (!canUseDOM) {\n      return 1;\n    }\n\n    return parseFloat((document.documentElement.clientWidth / window.innerWidth).toFixed(2));\n  };\n\n  DOMService.prototype.isZoomed = function () {\n    return this.zoomLevel() > 1;\n  };\n\n  return DOMService;\n}();\n\nexport { DOMService };","map":null,"metadata":{},"sourceType":"module"}