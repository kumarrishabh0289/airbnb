{"ast":null,"code":"import { cloneDate, addDays } from '@progress/kendo-date-math';\nimport { TIME_PART } from './models/TimePart';\nimport { MIDNIGHT_DATE, setTime } from '../utils';\n\nvar setter = function setter(method) {\n  return function (date, value) {\n    var clone = cloneDate(date);\n    clone[method](value);\n    return clone;\n  };\n};\n\nvar defaultGetters = [{\n  type: TIME_PART.hour,\n  getter: function getter(value) {\n    return value.getHours();\n  }\n}, {\n  type: TIME_PART.minute,\n  getter: function getter(value) {\n    return value.getMinutes();\n  }\n}, {\n  type: TIME_PART.second,\n  getter: function getter(value) {\n    return value.getSeconds();\n  }\n}, {\n  type: TIME_PART.millisecond,\n  getter: function getter(value) {\n    return value.getMilliseconds();\n  }\n}];\n\nvar left = function left(getter) {\n  return function (origin, _) {\n    return getter(origin);\n  };\n};\n\nvar right = function right(getter) {\n  return function (_, candidate) {\n    return getter(candidate);\n  };\n};\n\nvar convertToObject = function convertToObject(parts) {\n  return parts.reduce(function (obj, p) {\n    obj[p.type] = p.type;\n    return obj;\n  }, {});\n};\n\nvar getterByPart = function getterByPart(parts) {\n  return function (g) {\n    return parts[g.type] ? right(g.getter) : left(g.getter);\n  };\n};\n\nvar gettersFactory = function gettersFactory(getters) {\n  return function (parts) {\n    return getters.map(getterByPart(convertToObject(parts)));\n  };\n};\n\nvar snapValue = function snapValue(getter, step, min, type) {\n  return function (date) {\n    var value = getter(date);\n    var minValue = getter(min);\n\n    if (type === 'hour') {\n      return value - (value - minValue) % step;\n    }\n\n    if (date.getTime() <= min.getTime() && value !== 0 && value <= minValue) {\n      return Math.ceil(value / step) * step;\n    }\n\n    return value - value % step;\n  };\n};\n\nvar snappersFactory = function snappersFactory(getters) {\n  return function (steps, min) {\n    return getters.map(function (g) {\n      var step = Math.floor(steps[g.type]);\n      return step ? snapValue(g.getter, step, min, g.type) : g.getter;\n    });\n  };\n};\n/**\n * @hidden\n */\n\n\nexport var generateGetters = gettersFactory(defaultGetters);\n/**\n * @hidden\n */\n\nexport var generateSnappers = snappersFactory(defaultGetters);\n/**\n * @hidden\n */\n\nexport var valueMerger = function valueMerger(getters) {\n  return function (origin, candidate) {\n    origin.setHours.apply(origin, getters.map(function (g) {\n      return g(origin, candidate);\n    }));\n    return origin;\n  };\n};\n/**\n * @hidden\n */\n\nexport var snapTime = function snapTime(snappers) {\n  return function (candidate) {\n    var date = cloneDate(candidate);\n    date.setHours.apply(date, snappers.map(function (s) {\n      return s(date);\n    }));\n    return date;\n  };\n};\n/**\n * @hidden\n */\n\nexport var setHours = setter('setHours');\n/**\n * @hidden\n */\n\nexport var setMinutes = setter('setMinutes');\n/**\n * @hidden\n */\n\nexport var setSeconds = setter('setSeconds');\n/**\n * @hidden\n */\n\nexport var getNow = function getNow() {\n  return new Date();\n};\n/**\n * @hidden\n */\n\nexport var range = function range(start, end, step) {\n  if (step === void 0) {\n    step = 1;\n  }\n\n  var result = [];\n\n  for (var i = start; i < end; i = i + step) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nvar normalizeTimes = function normalizeTimes(candidate, min, max) {\n  return {\n    candidateValue: setTime(MIDNIGHT_DATE, candidate),\n    maxValue: addDays(setTime(MIDNIGHT_DATE, max), min.getHours() < max.getHours() ? 0 : 1),\n    minValue: setTime(MIDNIGHT_DATE, min)\n  };\n};\n/**\n * @hidden\n */\n\n\nexport var timeInRange = function timeInRange(candidate, min, max) {\n  if (!candidate || !min || !max) {\n    return candidate;\n  }\n\n  var _a = normalizeTimes(candidate, min, max),\n      candidateValue = _a.candidateValue,\n      minValue = _a.minValue,\n      maxValue = _a.maxValue;\n\n  if (candidateValue < minValue) {\n    return setTime(candidate, min);\n  }\n\n  if (candidateValue > maxValue) {\n    return setTime(candidate, max);\n  }\n\n  return candidate;\n};\n/**\n * @hidden\n */\n\nexport var isInTimeRange = function isInTimeRange(candidate, min, max) {\n  if (!candidate || !min || !max) {\n    return true;\n  }\n\n  var _a = normalizeTimes(candidate, min, max),\n      candidateValue = _a.candidateValue,\n      minValue = _a.minValue,\n      maxValue = _a.maxValue;\n\n  return minValue <= candidateValue && candidateValue <= maxValue;\n};\n/**\n * @hidden\n */\n\nexport var isInRange = function isInRange(candidate, min, max) {\n  if (candidate === null) {\n    return true;\n  }\n\n  var _a = normalizeTimes(candidate, min, max),\n      candidateValue = _a.candidateValue,\n      minValue = _a.minValue,\n      maxValue = _a.maxValue;\n\n  return minValue <= candidateValue && candidateValue <= maxValue;\n};\n/**\n * @hidden\n */\n\nexport var isSmallerThanMin = function isSmallerThanMin(val, min) {\n  if (val === null || min === null) {\n    return false;\n  }\n\n  var normalizedValue = setTime(MIDNIGHT_DATE, val);\n  var normalizedMin = setTime(MIDNIGHT_DATE, min);\n  return normalizedValue.getTime() < normalizedMin.getHours();\n};\n/**\n * @hidden\n */\n\nexport var isBiggerThanMax = function isBiggerThanMax(val, max) {\n  if (val === null || max === null) {\n    return false;\n  }\n\n  var normalizedValue = setTime(MIDNIGHT_DATE, val);\n  var normalizedMax = setTime(MIDNIGHT_DATE, max);\n  return normalizedMax.getTime() < normalizedValue.getHours();\n};","map":null,"metadata":{},"sourceType":"module"}