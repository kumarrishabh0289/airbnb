{"ast":null,"code":"import { addMonths, cloneDate, createDate, isEqual, getDate, lastDayOfMonth } from '@progress/kendo-date-math';\nimport { Mask } from './mask';\nimport { dateSymbolMap } from './../utils';\n/**\n * @hidden\n */\n\nvar KendoDate =\n/** @class */\nfunction () {\n  function KendoDate(intlProvider, formatPlaceholder, format) {\n    this.year = true;\n    this.month = true;\n    this.date = true;\n    this.hours = true;\n    this.minutes = true;\n    this.seconds = true;\n    this.milliseconds = true;\n    this.leadingZero = null;\n    this.typedMonthPart = '';\n    this.knownParts = 'adHhmMsEy';\n    this.symbols = {\n      'E': 'E',\n      'H': 'H',\n      'M': 'M',\n      'a': 'a',\n      'd': 'd',\n      'h': 'h',\n      'm': 'm',\n      's': 's',\n      'y': 'y'\n    };\n    this._value = getDate(new Date());\n    this.intlProvider = intlProvider;\n    this.formatPlaceholder = formatPlaceholder;\n    this.format = format;\n    this.monthNames = this.allFormatedMonths();\n  }\n\n  Object.defineProperty(KendoDate.prototype, \"intl\", {\n    get: function get() {\n      return this.intlProvider();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(KendoDate.prototype, \"value\", {\n    get: function get() {\n      return this._value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  KendoDate.prototype.setValue = function (value) {\n    if (!value) {\n      this._value = getDate(new Date());\n      this.modifyExisting(false);\n    } else if (!isEqual(value, this._value)) {\n      this._value = cloneDate(value);\n      this.modifyExisting(true);\n    }\n  };\n\n  KendoDate.prototype.hasValue = function () {\n    var _this = this;\n\n    var pred = function pred(a, p) {\n      return a || p.type !== 'literal' && p.type !== 'dayperiod' && _this.getExisting(p.pattern[0]);\n    };\n\n    return this.intl.splitDateFormat(this.format).reduce(pred, false);\n  };\n\n  KendoDate.prototype.getDateObject = function () {\n    for (var i = 0; i < this.knownParts.length; i++) {\n      if (!this.getExisting(this.knownParts[i])) {\n        return null;\n      }\n    }\n\n    return cloneDate(this.value);\n  };\n\n  KendoDate.prototype.getTextAndFormat = function () {\n    return this.merge(this.intl.formatDate(this.value, this.format), this.dateFormatString(this.value, this.format));\n  };\n\n  KendoDate.prototype.modifyExisting = function (value) {\n    var sampleFormat = this.dateFormatString(this.value, this.format).symbols;\n\n    for (var i = 0; i < sampleFormat.length; i++) {\n      this.setExisting(sampleFormat[i], value);\n    }\n  };\n\n  KendoDate.prototype.getExisting = function (symbol) {\n    switch (symbol) {\n      case 'y':\n        return this.year;\n\n      case 'M':\n      case 'L':\n        return this.month;\n\n      case 'd':\n        return this.date;\n\n      case 'E':\n        return this.date && this.month && this.year;\n\n      case 'h':\n      case 'H':\n        return this.hours;\n\n      case 'm':\n        return this.minutes;\n\n      case 's':\n        return this.seconds;\n\n      default:\n        return true;\n    }\n  };\n\n  KendoDate.prototype.setExisting = function (symbol, value) {\n    switch (symbol) {\n      case 'y':\n        // allow 2/29 dates\n        this.year = value;\n\n        if (value === false) {\n          this._value.setFullYear(2000);\n        }\n\n        break;\n\n      case 'M':\n        // make sure you can type 31 in the day part\n        this.month = value;\n\n        if (value === false) {\n          this._value.setMonth(0);\n        }\n\n        break;\n\n      case 'd':\n        this.date = value;\n        break;\n\n      case 'h':\n      case 'H':\n        this.hours = value;\n        break;\n\n      case 'm':\n        this.minutes = value;\n        break;\n\n      case 's':\n        this.seconds = value;\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  KendoDate.prototype.modifyPart = function (symbol, offset) {\n    var newValue = cloneDate(this.value);\n\n    switch (symbol) {\n      case 'y':\n        newValue.setFullYear(newValue.getFullYear() + offset);\n        break;\n\n      case 'M':\n        newValue = addMonths(this.value, offset);\n        break;\n\n      case 'd':\n      case 'E':\n        newValue.setDate(newValue.getDate() + offset);\n        break;\n\n      case 'h':\n      case 'H':\n        newValue.setHours(newValue.getHours() + offset);\n        break;\n\n      case 'm':\n        newValue.setMinutes(newValue.getMinutes() + offset);\n        break;\n\n      case 's':\n        newValue.setSeconds(newValue.getSeconds() + offset);\n        break;\n\n      case 'a':\n        newValue.setHours(newValue.getHours() + 12 * offset);\n        break;\n\n      default:\n        break;\n    }\n\n    this.setExisting(symbol, true);\n    this._value = newValue;\n  };\n\n  KendoDate.prototype.parsePart = function (symbol, currentChar) {\n    var _a;\n\n    this.resetLeadingZero();\n\n    if (!currentChar) {\n      this.setExisting(symbol, false);\n      return {\n        value: null\n      };\n    }\n\n    var baseDate = this.intl.formatDate(this.value, this.format);\n    var dateParts = this.dateFormatString(this.value, this.format);\n    var baseFormat = dateParts.symbols;\n    var replaced = false;\n    var prefix = '';\n    var current = '';\n    var suffix = '';\n\n    for (var i = 0; i < baseDate.length; i++) {\n      if (baseFormat[i] === symbol) {\n        current += this.getExisting(symbol) ? baseDate[i] : '0';\n        replaced = true;\n      } else if (!replaced) {\n        prefix += baseDate[i];\n      } else {\n        suffix += baseDate[i];\n      }\n    }\n\n    var parsedDate = null;\n    var month = this.matchMonth(currentChar);\n\n    while (current.length > 0 && current.charAt(0) === '0') {\n      current = current.slice(1);\n    }\n\n    if (current.length >= 4) {\n      current = '';\n    }\n\n    for (var i = 0; i < 2; i++) {\n      var middle = current + currentChar;\n      var middleNumber = parseInt(middle, 10);\n      parsedDate = this.intl.parseDate(prefix + middle + suffix, this.format);\n\n      if (!parsedDate && !isNaN(middleNumber) && !isNaN(parseInt(currentChar, 10))) {\n        if (symbol === 'M' && !month) {\n          var monthNumber = middleNumber - 1;\n\n          if (monthNumber > -1 && monthNumber < 12) {\n            parsedDate = cloneDate(this.value);\n            parsedDate.setMonth(monthNumber);\n\n            if (parsedDate.getMonth() !== monthNumber) {\n              parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));\n            }\n          }\n        }\n\n        if (symbol === 'y') {\n          parsedDate = createDate(parseInt(middle, 10), this.month ? this.value.getMonth() : 0, this.date ? this.value.getDate() : 1, this.hours ? this.value.getHours() : 0, this.minutes ? this.value.getMinutes() : 0, this.seconds ? this.value.getSeconds() : 0, this.milliseconds ? this.value.getMilliseconds() : 0);\n\n          if (this.date && parsedDate.getDate() !== this.value.getDate()) {\n            parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));\n          }\n        }\n      }\n\n      if (parsedDate) {\n        this._value = parsedDate;\n        this.setExisting(symbol, true);\n        return {\n          value: this.value\n        };\n      }\n\n      current = '';\n    }\n\n    if (month) {\n      parsedDate = this.intl.parseDate(prefix + month + suffix, this.format);\n\n      if (parsedDate) {\n        this._value = parsedDate;\n        this.setExisting(symbol, true);\n        return {\n          value: this.value\n        };\n      }\n    }\n\n    if (currentChar === '0') {\n      this.leadingZero = !this.isAbbrMonth(dateParts.partMap, symbol) ? (_a = {}, _a[symbol] = true, _a) : null;\n      this.setExisting(symbol, false);\n    }\n\n    return {\n      value: null\n    };\n  };\n\n  KendoDate.prototype.symbolMap = function (symbol) {\n    return this.intl.splitDateFormat(this.format).reduce(dateSymbolMap, {})[symbol];\n  };\n\n  KendoDate.prototype.resetLeadingZero = function () {\n    var hasLeadingZero = this.leadingZero !== null;\n    this.leadingZero = null;\n    return hasLeadingZero;\n  };\n\n  KendoDate.prototype.isAbbrMonth = function (parts, symbol) {\n    var pattern = this.partPattern(parts, symbol);\n    return pattern.type === 'month' && pattern.names;\n  };\n\n  KendoDate.prototype.partPattern = function (parts, symbol) {\n    return parts.filter(function (part) {\n      return part.pattern.indexOf(symbol) !== -1;\n    })[0];\n  };\n\n  KendoDate.prototype.matchMonth = function (typedChar) {\n    this.typedMonthPart += typedChar.toLowerCase();\n\n    if (this.monthNames.length === 0) {\n      return '';\n    }\n\n    while (this.typedMonthPart.length > 0) {\n      for (var i = 0; i < this.monthNames.length; i++) {\n        if (this.monthNames[i].toLowerCase().indexOf(this.typedMonthPart) === 0) {\n          return this.monthNames[i];\n        }\n      }\n\n      var monthAsNum = parseInt(this.typedMonthPart, 10);\n      /* ensure they exact match */\n\n      if (monthAsNum >= 1 && monthAsNum <= 12 && monthAsNum.toString() === this.typedMonthPart) {\n        return this.monthNames[monthAsNum - 1];\n      }\n\n      this.typedMonthPart = this.typedMonthPart.substring(1, this.typedMonthPart.length);\n    }\n\n    return '';\n  };\n\n  KendoDate.prototype.allFormatedMonths = function () {\n    var dateFormatParts = this.intl.splitDateFormat(this.format);\n\n    for (var i = 0; i < dateFormatParts.length; i++) {\n      if (dateFormatParts[i].type === 'month' && dateFormatParts[i].names) {\n        return this.intl.dateFormatNames(dateFormatParts[i].names);\n      }\n    }\n\n    return [];\n  };\n\n  KendoDate.prototype.dateFormatString = function (date, format) {\n    var dateFormatParts = this.intl.splitDateFormat(format);\n    var parts = [];\n    var partMap = [];\n\n    for (var i = 0; i < dateFormatParts.length; i++) {\n      var partLength = this.intl.formatDate(date, {\n        pattern: dateFormatParts[i].pattern\n      }).length;\n\n      while (partLength > 0) {\n        parts.push(this.symbols[dateFormatParts[i].pattern[0]] || '_');\n        partMap.push(dateFormatParts[i]);\n        partLength--;\n      }\n    }\n\n    var returnValue = new Mask();\n    returnValue.symbols = parts.join('');\n    returnValue.partMap = partMap;\n    return returnValue;\n  };\n\n  KendoDate.prototype.merge = function (text, mask) {\n    // Important: right to left.\n    var resultText = '';\n    var resultFormat = '';\n    var format = mask.symbols;\n\n    for (var r = format.length - 1; r >= 0; r--) {\n      if (this.knownParts.indexOf(format[r]) === -1 || this.getExisting(format[r])) {\n        resultText = text[r] + resultText;\n        resultFormat = format[r] + resultFormat;\n      } else {\n        var currentSymbol = format[r];\n\n        while (r >= 0 && currentSymbol === format[r]) {\n          r--;\n        }\n\n        r++;\n\n        if (this.leadingZero && this.leadingZero[currentSymbol]) {\n          resultText = '0' + resultText;\n        } else {\n          resultText = this.dateFieldName(mask.partMap[r]) + resultText;\n        }\n\n        while (resultFormat.length < resultText.length) {\n          resultFormat = format[r] + resultFormat;\n        }\n      }\n    }\n\n    return {\n      text: resultText,\n      format: resultFormat\n    };\n  };\n\n  KendoDate.prototype.dateFieldName = function (part) {\n    var formatPlaceholder = this.formatPlaceholder || 'wide';\n\n    if (formatPlaceholder[part.type]) {\n      return formatPlaceholder[part.type];\n    }\n\n    if (formatPlaceholder === 'formatPattern') {\n      return part.pattern;\n    }\n\n    return this.intl.dateFieldName(Object.assign(part, {\n      nameType: formatPlaceholder\n    }));\n  };\n\n  return KendoDate;\n}();\n\nexport { KendoDate };","map":null,"metadata":{},"sourceType":"module"}