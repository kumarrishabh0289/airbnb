{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport ToolbarItem from './tools/ToolbarItem';\nimport ToolbarButton from './tools/ToolbarButton';\nimport ButtonGroup from '../ButtonGroup';\nimport { classNames, Keys } from '@progress/kendo-react-common';\n/**\n * Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    render() {\n *       return (\n *          <Toolbar>\n *              <ToolbarItem>\n *                  <ButtonGroup>\n *                      <Button togglable={true} icon=\"bold\" />\n *                      <Button togglable={true} icon=\"italic\" />\n *                      <Button togglable={true} icon=\"underline\" />\n *                  </ButtonGroup>\n *              </ToolbarItem>\n *              <ToolbarItem>\n *                  <ButtonGroup>\n *                      <Button icon=\"hyperlink\">Insert Link</Button>\n *                      <Button icon=\"image\">Insert Image</Button>\n *                      <Button icon=\"table\">Insert Table</Button>\n *                  </ButtonGroup>\n *              </ToolbarItem>\n *          </Toolbar>\n *       );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar Toolbar =\n/** @class */\nfunction (_super) {\n  __extends(Toolbar, _super);\n\n  function Toolbar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._element = null;\n    _this.buttons = [];\n    _this.focusedIndex = 0;\n    _this.counter = 0;\n    _this.offsetHeight = 0;\n    _this.offsetWidth = 0;\n\n    _this.mapToolbarChild = function (toolbarItem) {\n      if (toolbarItem && toolbarItem.type === ToolbarItem) {\n        return React.cloneElement(toolbarItem, toolbarItem.props, React.Children.map(toolbarItem.props.children, _this.mapItemChildren));\n      }\n\n      return toolbarItem;\n    };\n\n    _this.mapItemChildren = function (tool) {\n      if (tool.type === ButtonGroup) {\n        return React.cloneElement(tool, tool.props, React.Children.map(tool.props.children, _this.mapButton));\n      }\n\n      return _this.mapButton(tool);\n    };\n\n    _this.mapButton = function (button) {\n      var index = _this.counter;\n      _this.counter++;\n      return React.createElement(ToolbarButton, {\n        ref: function ref(b) {\n          return _this.buttonRef(b, index);\n        },\n        tabIndex: _this.focusedIndex === index ? _this.props.tabIndex || Toolbar.defaultProps.tabIndex : -1,\n        button: button\n      });\n    };\n\n    _this.buttonRef = function (button, index) {\n      _this.buttons[index] = button;\n\n      if (!button && !_this.buttons.find(function (b) {\n        return b !== null;\n      })) {\n        _this.buttons.length = 0;\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var target = event.target;\n      var _a = _this,\n          focusedIndex = _a.focusedIndex,\n          buttons = _a.buttons;\n      var arrowKey = event.keyCode === Keys.left || event.keyCode === Keys.right;\n\n      if (!arrowKey || event.defaultPrevented || buttons.findIndex(function (b) {\n        return b !== null && b.element === target;\n      }) === -1) {\n        return;\n      }\n\n      if (event.keyCode === Keys.left) {\n        _this.focusButton(focusedIndex, focusedIndex - 1);\n      } else {\n        _this.focusButton(focusedIndex, focusedIndex + 1);\n      }\n    };\n\n    _this.onWindowResize = function (event) {\n      var element = _this.element;\n\n      if (!element) {\n        return;\n      }\n\n      var offsetWidth = element.offsetWidth;\n      var offsetHeight = element.offsetHeight;\n\n      if (_this.offsetWidth !== offsetWidth || _this.offsetHeight !== offsetHeight) {\n        _this.offsetWidth = offsetWidth;\n        _this.offsetHeight = offsetHeight;\n        var newSizes = {\n          offsetWidth: _this.offsetWidth,\n          offsetHeight: _this.offsetHeight\n        };\n\n        if (_this.props.onResize) {\n          _this.props.onResize.call(undefined, __assign({\n            target: _this\n          }, newSizes, {\n            nativeEvent: event\n          }));\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(Toolbar.prototype, \"element\", {\n    /**\n     * Returns the HTML element of the Toolbar component.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  Toolbar.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.onWindowResize);\n    var element = this.element;\n\n    if (element) {\n      this.offsetWidth = element.offsetWidth;\n      this.offsetHeight = element.offsetHeight;\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Toolbar.prototype.componentDidUpdate = function () {\n    var _this = this;\n\n    var element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    var focused = element.querySelector('button:focus');\n    var prevFocusedIndex = this.focusedIndex;\n\n    if (!focused) {\n      this.focusedIndex = 0;\n    } else {\n      var focusedIndex = this.buttons.findIndex(function (b) {\n        return b !== null && b.element === focused;\n      });\n\n      if (focusedIndex !== -1 && focusedIndex !== this.focusedIndex) {\n        this.focusedIndex = focusedIndex;\n      }\n    }\n\n    if (prevFocusedIndex !== this.focusedIndex) {\n      var _a = this.props.tabIndex,\n          tabIndex_1 = _a === void 0 ? Toolbar.defaultProps.tabIndex : _a;\n      this.buttons.forEach(function (button, index) {\n        if (button) {\n          button.tabIndex = index === _this.focusedIndex && button.tabIndex === -1 ? tabIndex_1 : -1;\n        }\n      });\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Toolbar.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.onWindowResize);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Toolbar.prototype.render = function () {\n    var _this = this;\n\n    this.counter = 0;\n    return React.createElement(\"div\", {\n      className: classNames('k-widget k-toolbar', this.props.className),\n      style: this.props.style,\n      role: \"toolbar\",\n      dir: this.props.dir,\n      ref: function ref(element) {\n        return _this._element = element;\n      },\n      onKeyDown: this.onKeyDown\n    }, React.Children.map(this.props.children, this.mapToolbarChild));\n  };\n\n  Toolbar.prototype.focusButton = function (prevIndex, index) {\n    var toolbarButton = this.buttons[index];\n\n    if (toolbarButton) {\n      var newFocused = toolbarButton.element;\n      var currentFocused = this.element && this.element.querySelector('button:focus');\n      var _a = this.props.tabIndex,\n          tabIndex = _a === void 0 ? Toolbar.defaultProps.tabIndex : _a;\n      this.focusedIndex = index;\n\n      if (currentFocused !== newFocused) {\n        toolbarButton.tabIndex = tabIndex;\n        toolbarButton.focus();\n        var prevButton = this.buttons[prevIndex];\n\n        if (prevButton) {\n          prevButton.tabIndex = -1;\n        }\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Toolbar.propTypes = {\n    tabIndex: PropTypes.number,\n    dir: PropTypes.string,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    onResize: PropTypes.func\n  };\n  /**\n   * @hidden\n   */\n\n  Toolbar.defaultProps = {\n    tabIndex: 0\n  };\n  return Toolbar;\n}(React.Component);\n\nexport default Toolbar;","map":null,"metadata":{},"sourceType":"module"}